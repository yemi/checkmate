// Generated by psc version 0.9.1
"use strict";
var Prelude = require("../Prelude");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Lazy = require("../Data.Lazy");
var Halogen_HTML_Core = require("../Halogen.HTML.Core");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Data_Unit = require("../Data.Unit");
var Data_Eq = require("../Data.Eq");
var Data_Functor = require("../Data.Functor");
var Control_Category = require("../Control.Category");
var runTree = function (k) {
    return function (t) {
        var $5 = Unsafe_Coerce.unsafeCoerce(t);
        return k($5);
    };
};
var mkTree$prime = Unsafe_Coerce.unsafeCoerce;
var thunkTree = runTree(function ($11) {
    return mkTree$prime((function (v) {
        var $6 = {};
        for (var $7 in v) {
            if (v.hasOwnProperty($7)) {
                $6[$7] = v[$7];
            };
        };
        $6.thunk = true;
        return $6;
    })($11));
});
var mkTree = function (dictEq) {
    return function (html) {
        return mkTree$prime({
            slot: Data_Unit.unit, 
            html: html, 
            eq: Data_Eq.eq(dictEq), 
            thunk: false
        });
    };
};
var graftTree = function (l) {
    return function (r) {
        return runTree(function (t) {
            return mkTree$prime({
                slot: r(t.slot), 
                html: Data_Functor.map(Data_Lazy.functorLazy)(Data_Bifunctor.bimap(Halogen_HTML_Core.bifunctorHTML)(graftTree(l)(Control_Category.id(Control_Category.categoryFn)))(l))(t.html), 
                eq: t.eq, 
                thunk: t.thunk
            });
        });
    };
};
var emptyTree = mkTree$prime({
    slot: Data_Unit.unit, 
    html: Data_Lazy.defer(function (v) {
        return new Halogen_HTML_Core.Text("");
    }), 
    eq: function (v) {
        return function (v1) {
            return false;
        };
    }, 
    thunk: false
});
module.exports = {
    emptyTree: emptyTree, 
    graftTree: graftTree, 
    mkTree: mkTree, 
    "mkTree'": mkTree$prime, 
    runTree: runTree, 
    thunkTree: thunkTree
};
