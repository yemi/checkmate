// Generated by psc version 0.9.1
"use strict";
var Data_Comparison = require("../Data.Comparison");
var Data_Decide = require("../Data.Decide");
var Data_Divisible = require("../Data.Divisible");
var Data_Equivalence = require("../Data.Equivalence");
var Data_Function = require("../Data.Function");
var Data_Monoid = require("../Data.Monoid");
var Data_Op = require("../Data.Op");
var Data_Predicate = require("../Data.Predicate");
var Data_Void = require("../Data.Void");
var Control_Category = require("../Control.Category");
var Decidable = function (__superclass_Data$dotDecide$dotDecide_0, __superclass_Data$dotDivisible$dotDivisible_1, lose) {
    this["__superclass_Data.Decide.Decide_0"] = __superclass_Data$dotDecide$dotDecide_0;
    this["__superclass_Data.Divisible.Divisible_1"] = __superclass_Data$dotDivisible$dotDivisible_1;
    this.lose = lose;
};
var lose = function (dict) {
    return dict.lose;
};
var lost = function (dictDecidable) {
    return lose(dictDecidable)(Control_Category.id(Control_Category.categoryFn));
};
var decidablePredicate = new Decidable(function () {
    return Data_Decide.choosePredicate;
}, function () {
    return Data_Divisible.divisiblePredicate;
}, function (f) {
    return function (a) {
        return Data_Void.absurd(f(a));
    };
});
var decidableOp = function (dictMonoid) {
    return new Decidable(function () {
        return Data_Decide.chooseOp(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
    }, function () {
        return Data_Divisible.divisibleOp(dictMonoid);
    }, function (f) {
        return function (a) {
            return Data_Void.absurd(f(a));
        };
    });
};
var decidableEquivalence = new Decidable(function () {
    return Data_Decide.chooseEquivalence;
}, function () {
    return Data_Divisible.divisibleEquivalence;
}, function (f) {
    return function (a) {
        return Data_Void.absurd(f(a));
    };
});
var decidableComparison = new Decidable(function () {
    return Data_Decide.chooseComparison;
}, function () {
    return Data_Divisible.divisibleComparison;
}, function (f) {
    return function (a) {
        return function (v) {
            return Data_Void.absurd(f(a));
        };
    };
});
module.exports = {
    Decidable: Decidable, 
    lose: lose, 
    lost: lost, 
    decidableComparison: decidableComparison, 
    decidableEquivalence: decidableEquivalence, 
    decidablePredicate: decidablePredicate, 
    decidableOp: decidableOp
};
