// Generated by psc version 0.9.1
"use strict";
var Prelude = require("../Prelude");
var Data_Foreign_Class = require("../Data.Foreign.Class");
var Data_Generic = require("../Data.Generic");
var Data_Maybe = require("../Data.Maybe");
var Control_Apply = require("../Control.Apply");
var Data_Unit = require("../Data.Unit");
var Data_Show = require("../Data.Show");
var Control_Bind = require("../Control.Bind");
var Data_Function = require("../Data.Function");
var Control_Applicative = require("../Control.Applicative");
var Data_Either = require("../Data.Either");
var Data_Foreign_Index = require("../Data.Foreign.Index");
var Weather = function (x) {
    return x;
};
var Initialize = (function () {
    function Initialize(value0) {
        this.value0 = value0;
    };
    Initialize.create = function (value0) {
        return new Initialize(value0);
    };
    return Initialize;
})();
var weatherGeneric = new Data_Generic.Generic(function (v) {
    if (v instanceof Data_Generic.SProd && (v.value0 === "Model.Weather" && v.value1.length === 1)) {
        return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Weather))((function (r) {
            if (r instanceof Data_Generic.SRecord && r.value0.length === 2) {
                return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(function (conditions1) {
                    return function (temperature1) {
                        return {
                            conditions: conditions1, 
                            temperature: temperature1
                        };
                    };
                }))(Data_Generic.fromSpine(Data_Generic.genericString)((r.value0[0]).recValue(Data_Unit.unit))))(Data_Generic.fromSpine(Data_Generic.genericNumber)((r.value0[1]).recValue(Data_Unit.unit)));
            };
            return Data_Maybe.Nothing.value;
        })(v.value1[0](Data_Unit.unit)));
    };
    return Data_Maybe.Nothing.value;
}, function ($dollarq) {
    return new Data_Generic.SigProd("Model.Weather", [ {
        sigConstructor: "Model.Weather", 
        sigValues: [ function ($dollarq1) {
            return new Data_Generic.SigRecord([ {
                recLabel: "conditions", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
                }
            }, {
                recLabel: "temperature", 
                recValue: function ($dollarq2) {
                    return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
                }
            } ]);
        } ]
    } ]);
}, function (v) {
    return new Data_Generic.SProd("Model.Weather", [ function ($dollarq) {
        return new Data_Generic.SRecord([ {
            recLabel: "conditions", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(Data_Generic.genericString)(v.conditions);
            }
        }, {
            recLabel: "temperature", 
            recValue: function ($dollarq1) {
                return Data_Generic.toSpine(Data_Generic.genericNumber)(v.temperature);
            }
        } ]);
    } ]);
});
var showWeather = new Data_Show.Show(Data_Generic.gShow(weatherGeneric));
var isForeignWeather = new Data_Foreign_Class.IsForeign(function (val) {
    return Control_Bind.bind(Data_Either.bindEither)(Data_Function.applyFlipped(val)(Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("currently"))(Data_Foreign_Class.readProp(Data_Foreign_Class.numberIsForeign)(Data_Foreign_Index.indexString)("temperature"))))(function (v) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Function.applyFlipped(val)(Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("currently"))(Data_Foreign_Class.readProp(Data_Foreign_Class.stringIsForeign)(Data_Foreign_Index.indexString)("icon"))))(function (v1) {
            return Data_Function.apply(Control_Applicative.pure(Data_Either.applicativeEither))({
                temperature: v, 
                conditions: v1
            });
        });
    });
});
var initialState = {
    busy: false, 
    weather: Data_Maybe.Nothing.value
};
module.exports = {
    Initialize: Initialize, 
    Weather: Weather, 
    initialState: initialState, 
    weatherGeneric: weatherGeneric, 
    showWeather: showWeather, 
    isForeignWeather: isForeignWeather
};
