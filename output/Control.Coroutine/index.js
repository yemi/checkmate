// Generated by psc version 0.9.1
"use strict";
var Prelude = require("../Prelude");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class");
var Control_Monad_Trans = require("../Control.Monad.Trans");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Either = require("../Data.Either");
var Data_Functor = require("../Data.Functor");
var Data_Identity = require("../Data.Identity");
var Data_Maybe = require("../Data.Maybe");
var Data_Profunctor = require("../Data.Profunctor");
var Data_Tuple = require("../Data.Tuple");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Control_Applicative = require("../Control.Applicative");
var Data_Unit = require("../Data.Unit");
var Control_Bind = require("../Control.Bind");
var Control_Apply = require("../Control.Apply");
var Control_Category = require("../Control.Category");
var Transform = function (x) {
    return x;
};
var Emit = (function () {
    function Emit(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Emit.create = function (value0) {
        return function (value1) {
            return new Emit(value0, value1);
        };
    };
    return Emit;
})();
var CoTransform = (function () {
    function CoTransform(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    CoTransform.create = function (value0) {
        return function (value1) {
            return new CoTransform(value0, value1);
        };
    };
    return CoTransform;
})();
var Await = function (x) {
    return x;
};
var runProcess = function (dictMonadRec) {
    return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec)(function ($153) {
        return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(Data_Identity.runIdentity($153));
    });
};
var profunctorAwait = new Data_Profunctor.Profunctor(function (f) {
    return function (g) {
        return function (v) {
            return Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(f)(g)(v);
        };
    };
});
var loop = function (dictFunctor) {
    return function (dictMonad) {
        return function (me) {
            return Control_Monad_Rec_Class.tailRecM(Control_Monad_Free_Trans.monadRecFreeT(dictFunctor)(dictMonad))(function (v) {
                return Data_Functor.map(Control_Monad_Free_Trans.functorFreeT(dictFunctor)(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Data_Maybe.maybe(new Data_Either.Left(Data_Unit.unit))(Data_Either.Right.create))(me);
            })(Data_Unit.unit);
        };
    };
};
var fuseWith = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictFunctor2) {
            return function (dictMonadRec) {
                return function (zap) {
                    return function (fs) {
                        return function (gs) {
                            var go = function (v) {
                                return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1))(function (v1) {
                                    return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0))(function (v2) {
                                        var $65 = Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(zap(Data_Tuple.Tuple.create))(v2))(v1);
                                        if ($65 instanceof Data_Either.Left) {
                                            return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Left($65.value0));
                                        };
                                        if ($65 instanceof Data_Either.Right) {
                                            return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(Data_Functor.map(dictFunctor2)(function (t) {
                                                return Control_Monad_Free_Trans.freeT(function (v3) {
                                                    return go(t);
                                                });
                                            })($65.value0)));
                                        };
                                        throw new Error("Failed pattern match at Control.Coroutine line 68, column 5 - line 70, column 63: " + [ $65.constructor.name ]);
                                    });
                                });
                            };
                            return Control_Monad_Free_Trans.freeT(function (v) {
                                return go(new Data_Tuple.Tuple(fs, gs));
                            });
                        };
                    };
                };
            };
        };
    };
};
var functorAwait = new Data_Functor.Functor(Data_Profunctor.rmap(profunctorAwait));
var joinConsumers = function (dictMonadRec) {
    return fuseWith(functorAwait)(functorAwait)(functorAwait)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return function (v2) {
                    return f(v(v2.value0))(v1(v2.value1));
                };
            };
        };
    });
};
var bifunctorTransform = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return function ($154) {
                return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(f)(g)(v($154));
            };
        };
    };
});
var functorTransform = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorTransform));
var composeTransformers = function (dictMonadRec) {
    return fuseWith(functorTransform)(functorTransform)(functorTransform)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return function (i) {
                    var $82 = v(i);
                    var $83 = v1($82.value0);
                    return new Data_Tuple.Tuple($83.value0, f($82.value1)($83.value1));
                };
            };
        };
    });
};
var transform = function (dictMonad) {
    return function (f) {
        return Control_Monad_Free_Trans.liftFreeT(functorTransform)(dictMonad)(function (i) {
            return new Data_Tuple.Tuple(f(i), Data_Unit.unit);
        });
    };
};
var transformConsumer = function (dictMonadRec) {
    return fuseWith(functorTransform)(functorAwait)(functorAwait)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return function (i) {
                    var $90 = v(i);
                    return f($90.value1)(v1($90.value0));
                };
            };
        };
    });
};
var bifunctorEmit = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Emit(f(v.value0), g(v.value1));
        };
    };
});
var functorEmit = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorEmit));
var connect = function (dictMonadRec) {
    return fuseWith(functorEmit)(functorAwait)(Data_Identity.functorIdentity)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return f(v.value1)(v1(v.value0));
            };
        };
    });
};
var emit = function (dictMonad) {
    return function (o) {
        return Control_Monad_Free_Trans.liftFreeT(functorEmit)(dictMonad)(new Emit(o, Data_Unit.unit));
    };
};
var joinProducers = function (dictMonadRec) {
    return fuseWith(functorEmit)(functorEmit)(functorEmit)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return new Emit(new Data_Tuple.Tuple(v.value0, v1.value0), f(v.value1)(v1.value1));
            };
        };
    });
};
var producer = function (dictMonad) {
    return function (recv) {
        return loop(functorEmit)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorEmit)(dictMonad))(Control_Monad_Trans.lift(Control_Monad_Free_Trans.monadTransFreeT(functorEmit))(dictMonad)(recv))(function (v) {
            if (v instanceof Data_Either.Left) {
                return Data_Functor.voidLeft(Control_Monad_Free_Trans.functorFreeT(functorEmit)(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(emit(dictMonad)(v.value0))(Data_Maybe.Nothing.value);
            };
            if (v instanceof Data_Either.Right) {
                return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorEmit)(dictMonad))(new Data_Maybe.Just(v.value0));
            };
            throw new Error("Failed pattern match at Control.Coroutine line 94, column 3 - line 96, column 29: " + [ v.constructor.name ]);
        }));
    };
};
var transformProducer = function (dictMonadRec) {
    return fuseWith(functorEmit)(functorTransform)(functorEmit)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                var $114 = v1(v.value0);
                return new Emit($114.value0, f(v.value1)($114.value1));
            };
        };
    });
};
var bifunctorCoTransform = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new CoTransform(f(v.value0), function ($155) {
                return g(v.value1($155));
            });
        };
    };
});
var functorCoTransform = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorCoTransform));
var composeCoTransformers = function (dictMonadRec) {
    return fuseWith(functorCoTransform)(functorCoTransform)(functorCoTransform)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return new CoTransform(v1.value0, function (i) {
                    return f(v.value1(i))(v1.value1(v.value0));
                });
            };
        };
    });
};
var cotransform = function (dictMonad) {
    return function (o) {
        return Control_Monad_Free_Trans.freeT(function (v) {
            return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(new CoTransform(o, Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorCoTransform)(dictMonad)))));
        });
    };
};
var fuseCoTransform = function (dictMonadRec) {
    return fuseWith(functorTransform)(functorCoTransform)(Data_Identity.functorIdentity)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                var $133 = v(v1.value0);
                return f($133.value1)(v1.value1($133.value0));
            };
        };
    });
};
var transformCoTransformL = function (dictMonadRec) {
    return fuseWith(functorTransform)(functorCoTransform)(functorCoTransform)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return new CoTransform(v1.value0, function (i1) {
                    var $140 = v(i1);
                    return f($140.value1)(v1.value1($140.value0));
                });
            };
        };
    });
};
var transformCoTransformR = function (dictMonadRec) {
    return fuseWith(functorCoTransform)(functorTransform)(functorCoTransform)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                var $147 = v1(v.value0);
                return new CoTransform($147.value0, function ($156) {
                    return (function (v2) {
                        return f(v2)($147.value1);
                    })(v.value1($156));
                });
            };
        };
    });
};
var $$await = function (dictMonad) {
    return Control_Monad_Free_Trans.liftFreeT(functorAwait)(dictMonad)(Control_Category.id(Control_Category.categoryFn));
};
var consumer = function (dictMonad) {
    return function (send) {
        return loop(functorAwait)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorAwait)(dictMonad))($$await(dictMonad))(function (v) {
            return Control_Monad_Trans.lift(Control_Monad_Free_Trans.monadTransFreeT(functorAwait))(dictMonad)(send(v));
        }));
    };
};
module.exports = {
    Await: Await, 
    CoTransform: CoTransform, 
    Emit: Emit, 
    Transform: Transform, 
    "await": $$await, 
    composeCoTransformers: composeCoTransformers, 
    composeTransformers: composeTransformers, 
    connect: connect, 
    consumer: consumer, 
    cotransform: cotransform, 
    emit: emit, 
    fuseCoTransform: fuseCoTransform, 
    fuseWith: fuseWith, 
    joinConsumers: joinConsumers, 
    joinProducers: joinProducers, 
    loop: loop, 
    producer: producer, 
    runProcess: runProcess, 
    transform: transform, 
    transformCoTransformL: transformCoTransformL, 
    transformCoTransformR: transformCoTransformR, 
    transformConsumer: transformConsumer, 
    transformProducer: transformProducer, 
    bifunctorEmit: bifunctorEmit, 
    functorEmit: functorEmit, 
    profunctorAwait: profunctorAwait, 
    functorAwait: functorAwait, 
    bifunctorTransform: bifunctorTransform, 
    functorTransform: functorTransform, 
    bifunctorCoTransform: bifunctorCoTransform, 
    functorCoTransform: functorCoTransform
};
