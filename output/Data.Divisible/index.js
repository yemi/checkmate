// Generated by psc version 0.9.1
"use strict";
var Data_Comparison = require("../Data.Comparison");
var Data_Divide = require("../Data.Divide");
var Data_Equivalence = require("../Data.Equivalence");
var Data_Function = require("../Data.Function");
var Data_Monoid = require("../Data.Monoid");
var Data_Op = require("../Data.Op");
var Data_Ordering = require("../Data.Ordering");
var Data_Predicate = require("../Data.Predicate");
var Divisible = function (__superclass_Data$dotDivide$dotDivide_0, conquer) {
    this["__superclass_Data.Divide.Divide_0"] = __superclass_Data$dotDivide$dotDivide_0;
    this.conquer = conquer;
};
var divisiblePredicate = new Divisible(function () {
    return Data_Divide.dividePredicate;
}, Data_Function["const"](true));
var divisibleOp = function (dictMonoid) {
    return new Divisible(function () {
        return Data_Divide.divideOp(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
    }, Data_Function.apply(Data_Op.Op)(Data_Function["const"](Data_Monoid.mempty(dictMonoid))));
};
var divisibleEquivalence = new Divisible(function () {
    return Data_Divide.divideEquivalence;
}, Data_Function.apply(Data_Equivalence.Equivalence)(function (v) {
    return function (v1) {
        return true;
    };
}));
var divisibleComparison = new Divisible(function () {
    return Data_Divide.divideComparison;
}, Data_Function.apply(Data_Comparison.Comparison)(function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
}));
var conquer = function (dict) {
    return dict.conquer;
};
module.exports = {
    Divisible: Divisible, 
    conquer: conquer, 
    divisibleComparison: divisibleComparison, 
    divisibleEquivalence: divisibleEquivalence, 
    divisiblePredicate: divisiblePredicate, 
    divisibleOp: divisibleOp
};
