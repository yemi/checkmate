// Generated by psc version 0.9.1
"use strict";
var Prelude = require("../Prelude");
var Control_Comonad = require("../Control.Comonad");
var Control_Alternative = require("../Control.Alternative");
var Control_Extend = require("../Control.Extend");
var Control_Monad_Trampoline = require("../Control.Monad.Trampoline");
var Data_Foldable = require("../Data.Foldable");
var Data_Traversable = require("../Data.Traversable");
var Data_Functor = require("../Data.Functor");
var Data_Function = require("../Data.Function");
var Data_Semigroup = require("../Data.Semigroup");
var Control_Category = require("../Control.Category");
var Control_Apply = require("../Control.Apply");
var Control_Applicative = require("../Control.Applicative");
var Control_Plus = require("../Control.Plus");
var Control_Bind = require("../Control.Bind");
var Control_Alt = require("../Control.Alt");
var Control_Monad = require("../Control.Monad");
var Control_Monad_Free = require("../Control.Monad.Free");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Cofree = (function () {
    function Cofree(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cofree.create = function (value0) {
        return function (value1) {
            return new Cofree(value0, value1);
        };
    };
    return Cofree;
})();
var tail = function (v) {
    return Control_Monad_Trampoline.runTrampoline(v.value1);
};
var mkCofree = function (a) {
    return function (t) {
        return new Cofree(a, Control_Applicative.pure(Control_Monad_Free.freeApplicative)(t));
    };
};
var head = function (v) {
    return v.value0;
};
var foldableCofree = function (dictFoldable) {
    return new Data_Foldable.Foldable(function (dictMonoid) {
        return function (f) {
            var go = function (fa) {
                return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(head(fa)))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(go)(tail(fa)));
            };
            return go;
        };
    }, function (f) {
        var go = function (b) {
            return function (fa) {
                return Data_Foldable.foldl(dictFoldable)(go)(f(b)(head(fa)))(tail(fa));
            };
        };
        return go;
    }, function (f) {
        var go = function (fa) {
            return function (b) {
                return f(head(fa))(Data_Foldable.foldr(dictFoldable)(go)(b)(tail(fa)));
            };
        };
        return Data_Function.flip(go);
    });
};
var _tail = function (v) {
    return v.value1;
};
var _lift = function (dictFunctor) {
    return function ($25) {
        return Data_Functor.map(Control_Monad_Free.freeFunctor)(Data_Functor.map(dictFunctor)($25));
    };
};
var functorCofree = function (dictFunctor) {
    return new Data_Functor.Functor(function (f) {
        var loop = function (fa) {
            return new Cofree(f(head(fa)), _lift(dictFunctor)(loop)(_tail(fa)));
        };
        return loop;
    });
};
var applyCofree = function (dictApply) {
    return new Control_Apply.Apply(function () {
        return functorCofree(dictApply["__superclass_Data.Functor.Functor_0"]());
    }, function (f) {
        return function (x) {
            var t = Control_Apply.apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Control_Apply.apply(applyCofree(dictApply)))(tail(f)))(tail(x));
            var h = head(f)(head(x));
            return mkCofree(h)(t);
        };
    });
};
var applicativeCofree = function (dictAlternative) {
    return new Control_Applicative.Applicative(function () {
        return applyCofree((dictAlternative["__superclass_Control.Applicative.Applicative_0"]())["__superclass_Control.Apply.Apply_0"]());
    }, function (a) {
        return mkCofree(a)(Control_Plus.empty(dictAlternative["__superclass_Control.Plus.Plus_1"]()));
    });
};
var bindCofree = function (dictAlternative) {
    return new Control_Bind.Bind(function () {
        return applyCofree((dictAlternative["__superclass_Control.Applicative.Applicative_0"]())["__superclass_Control.Apply.Apply_0"]());
    }, function (fa) {
        return function (f) {
            var loop = function (fa1) {
                var fh = f(head(fa1));
                return mkCofree(head(fh))(Control_Alt.alt((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(tail(fh))(Data_Functor.map(((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Data.Functor.Functor_0"]())(loop)(tail(fa1))));
            };
            return loop(fa);
        };
    });
};
var monadCofree = function (dictAlternative) {
    return new Control_Monad.Monad(function () {
        return applicativeCofree(dictAlternative);
    }, function () {
        return bindCofree(dictAlternative);
    });
};
var extendCofree = function (dictFunctor) {
    return new Control_Extend.Extend(function () {
        return functorCofree(dictFunctor);
    }, function (f) {
        var loop = function (fa) {
            return new Cofree(f(fa), _lift(dictFunctor)(loop)(_tail(fa)));
        };
        return loop;
    });
};
var comonadCofree = function (dictFunctor) {
    return new Control_Comonad.Comonad(function () {
        return extendCofree(dictFunctor);
    }, head);
};
var traversableCofree = function (dictTraversable) {
    return new Data_Traversable.Traversable(function () {
        return foldableCofree(dictTraversable["__superclass_Data.Foldable.Foldable_1"]());
    }, function () {
        return functorCofree(dictTraversable["__superclass_Data.Functor.Functor_0"]());
    }, function (dictApplicative) {
        return Data_Traversable.traverse(traversableCofree(dictTraversable))(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
    }, function (dictApplicative) {
        return function (f) {
            var loop = function (ta) {
                return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(mkCofree)(f(head(ta))))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(loop)(tail(ta)));
            };
            return loop;
        };
    });
};
module.exports = {
    head: head, 
    mkCofree: mkCofree, 
    tail: tail, 
    functorCofree: functorCofree, 
    foldableCofree: foldableCofree, 
    traversableCofree: traversableCofree, 
    extendCofree: extendCofree, 
    comonadCofree: comonadCofree, 
    applyCofree: applyCofree, 
    applicativeCofree: applicativeCofree, 
    bindCofree: bindCofree, 
    monadCofree: monadCofree
};
