// Generated by psc version 0.9.1
"use strict";
var Prelude = require("../Prelude");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Aff_Internal_1 = require("../Control.Monad.Aff.Internal");
var Control_Monad_Aff_Internal_1 = require("../Control.Monad.Aff.Internal");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Data_Function_Uncurried = require("../Data.Function.Uncurried");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var Data_Function = require("../Data.Function");
var Control_Bind = require("../Control.Bind");
var Control_Applicative = require("../Control.Applicative");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var fromAVBox = Unsafe_Coerce.unsafeCoerce;
var killVar = function (q) {
    return function (e) {
        return Data_Function.apply(fromAVBox)(Data_Function_Uncurried.runFn3(Control_Monad_Aff_Internal_1._killVar)(Control_Monad_Aff.nonCanceler)(q)(e));
    };
};
var makeVar = Data_Function.apply(fromAVBox)(Control_Monad_Aff_Internal_1._makeVar(Control_Monad_Aff.nonCanceler));
var putVar = function (q) {
    return function (a) {
        return Data_Function.apply(fromAVBox)(Data_Function_Uncurried.runFn3(Control_Monad_Aff_Internal_1._putVar)(Control_Monad_Aff.nonCanceler)(q)(a));
    };
};
var makeVar$prime = function (a) {
    return Control_Bind.bind(Control_Monad_Aff.bindAff)(makeVar)(function (v) {
        return Control_Bind.bind(Control_Monad_Aff.bindAff)(putVar(v)(a))(function () {
            return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v);
        });
    });
};
var takeVar = function (q) {
    return Data_Function.apply(fromAVBox)(Data_Function_Uncurried.runFn2(Control_Monad_Aff_Internal_1._takeVar)(Control_Monad_Aff.nonCanceler)(q));
};
var modifyVar = function (f) {
    return function (v) {
        return Control_Bind.bind(Control_Monad_Aff.bindAff)(takeVar(v))(function ($2) {
            return putVar(v)(f($2));
        });
    };
};
module.exports = {
    killVar: killVar, 
    makeVar: makeVar, 
    "makeVar'": makeVar$prime, 
    modifyVar: modifyVar, 
    putVar: putVar, 
    takeVar: takeVar
};
