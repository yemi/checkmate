// Generated by psc version 0.9.1
"use strict";
var Prelude = require("../Prelude");
var Control_Comonad = require("../Control.Comonad");
var Control_Extend = require("../Control.Extend");
var Control_Monad_Trans = require("../Control.Monad.Trans");
var Data_Functor = require("../Data.Functor");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var Control_Apply = require("../Control.Apply");
var Control_Category = require("../Control.Category");
var Control_Applicative = require("../Control.Applicative");
var Control_Bind = require("../Control.Bind");
var Control_Monad = require("../Control.Monad");
var Yoneda = function (x) {
    return x;
};
var runYoneda = function (v) {
    return function (k) {
        return v(k);
    };
};
var lowerYoneda = function (v) {
    return v(Control_Category.id(Control_Category.categoryFn));
};
var liftYoneda = function (dictFunctor) {
    return function (m) {
        return function (k) {
            return Data_Functor.map(dictFunctor)(k)(m);
        };
    };
};
var monadTransYoneda = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
    return liftYoneda(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
});
var hoistYoneda = function (nat) {
    return function (v) {
        return Data_Functor.map(Data_Functor.functorFn)(nat)(v);
    };
};
var functorYoneda = new Data_Functor.Functor(function (f) {
    return function (m) {
        return function (k) {
            return runYoneda(m)(function ($26) {
                return k(f($26));
            });
        };
    };
});
var extendYoneda = function (dictExtend) {
    return new Control_Extend.Extend(function () {
        return functorYoneda;
    }, function (f) {
        return function (v) {
            return function (k) {
                return Control_Extend.extend(dictExtend)(function ($27) {
                    return k(f(liftYoneda(dictExtend["__superclass_Data.Functor.Functor_0"]())($27)));
                })(v(Control_Category.id(Control_Category.categoryFn)));
            };
        };
    });
};
var comonadYoneda = function (dictComonad) {
    return new Control_Comonad.Comonad(function () {
        return extendYoneda(dictComonad["__superclass_Control.Extend.Extend_0"]());
    }, function ($28) {
        return Control_Comonad.extract(dictComonad)(lowerYoneda($28));
    });
};
var applyYoneda = function (dictApply) {
    return new Control_Apply.Apply(function () {
        return functorYoneda;
    }, function (v) {
        return function (v1) {
            return function (k) {
                return Control_Apply.apply(dictApply)(v(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(k)))(v1(Control_Category.id(Control_Category.categoryFn)));
            };
        };
    });
};
var bindYoneda = function (dictBind) {
    return new Control_Bind.Bind(function () {
        return applyYoneda(dictBind["__superclass_Control.Apply.Apply_0"]());
    }, function (v) {
        return function (g) {
            return function (k) {
                return Control_Bind.bind(dictBind)(v(Control_Category.id(Control_Category.categoryFn)))(function (a) {
                    return runYoneda(g(a))(k);
                });
            };
        };
    });
};
var applicativeYoneda = function (dictApplicative) {
    return new Control_Applicative.Applicative(function () {
        return applyYoneda(dictApplicative["__superclass_Control.Apply.Apply_0"]());
    }, function ($29) {
        return liftYoneda((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Applicative.pure(dictApplicative)($29));
    });
};
var monadYoneda = function (dictMonad) {
    return new Control_Monad.Monad(function () {
        return applicativeYoneda(dictMonad["__superclass_Control.Applicative.Applicative_0"]());
    }, function () {
        return bindYoneda(dictMonad["__superclass_Control.Bind.Bind_1"]());
    });
};
module.exports = {
    Yoneda: Yoneda, 
    hoistYoneda: hoistYoneda, 
    liftYoneda: liftYoneda, 
    lowerYoneda: lowerYoneda, 
    runYoneda: runYoneda, 
    functorYoneda: functorYoneda, 
    applyYoneda: applyYoneda, 
    applicativeYoneda: applicativeYoneda, 
    bindYoneda: bindYoneda, 
    monadYoneda: monadYoneda, 
    monadTransYoneda: monadTransYoneda, 
    extendYoneda: extendYoneda, 
    comonadYoneda: comonadYoneda
};
