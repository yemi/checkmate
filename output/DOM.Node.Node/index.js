// Generated by psc version 0.9.1
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Data_Enum = require("../Data.Enum");
var Data_Nullable = require("../Data.Nullable");
var Data_Maybe = require("../Data.Maybe");
var DOM = require("../DOM");
var DOM_Node_NodeType = require("../DOM.Node.NodeType");
var DOM_Node_Types = require("../DOM.Node.Types");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var nodeType = function (dictPartial) {
    return function ($1) {
        return Data_Maybe.fromJust(dictPartial)(Data_Enum.toEnum(DOM_Node_NodeType.boundedEnumNodeType)($foreign.nodeTypeIndex($1)));
    };
};
module.exports = {
    nodeType: nodeType, 
    appendChild: $foreign.appendChild, 
    baseURI: $foreign.baseURI, 
    childNodes: $foreign.childNodes, 
    clone: $foreign.clone, 
    compareDocumentPositionBits: $foreign.compareDocumentPositionBits, 
    contains: $foreign.contains, 
    deepClone: $foreign.deepClone, 
    firstChild: $foreign.firstChild, 
    hasChildNodes: $foreign.hasChildNodes, 
    insertBefore: $foreign.insertBefore, 
    isDefaultNamespace: $foreign.isDefaultNamespace, 
    isEqualNode: $foreign.isEqualNode, 
    lastChild: $foreign.lastChild, 
    lookupNamespaceURI: $foreign.lookupNamespaceURI, 
    lookupPrefix: $foreign.lookupPrefix, 
    nextSibling: $foreign.nextSibling, 
    nodeName: $foreign.nodeName, 
    nodeTypeIndex: $foreign.nodeTypeIndex, 
    nodeValue: $foreign.nodeValue, 
    normalize: $foreign.normalize, 
    ownerDocument: $foreign.ownerDocument, 
    parentElement: $foreign.parentElement, 
    parentNode: $foreign.parentNode, 
    previousSibling: $foreign.previousSibling, 
    removeChild: $foreign.removeChild, 
    replaceChild: $foreign.replaceChild, 
    setNodeValue: $foreign.setNodeValue, 
    setTextContent: $foreign.setTextContent, 
    textContent: $foreign.textContent
};
