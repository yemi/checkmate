// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Seconds = function (x) {
    return x;
};
var SecondOfMinute = function (x) {
    return x;
};
var Minutes = function (x) {
    return x;
};
var MinuteOfHour = function (x) {
    return x;
};
var Milliseconds = function (x) {
    return x;
};
var MillisecondOfSecond = function (x) {
    return x;
};
var Hours = function (x) {
    return x;
};
var HourOfDay = function (x) {
    return x;
};
var TimeValue = function (fromHours, fromMilliseconds, fromMinutes, fromSeconds, toHours, toMilliseconds, toMinutes, toSeconds) {
    this.fromHours = fromHours;
    this.fromMilliseconds = fromMilliseconds;
    this.fromMinutes = fromMinutes;
    this.fromSeconds = fromSeconds;
    this.toHours = toHours;
    this.toMilliseconds = toMilliseconds;
    this.toMinutes = toMinutes;
    this.toSeconds = toSeconds;
};
var toSeconds = function (dict) {
    return dict.toSeconds;
};
var toMinutes = function (dict) {
    return dict.toMinutes;
};
var toMilliseconds = function (dict) {
    return dict.toMilliseconds;
};
var toHours = function (dict) {
    return dict.toHours;
};
var timeValueSeconds = new TimeValue(function (v) {
    return v * 3600.0;
}, function (v) {
    return v / 1000.0;
}, function (v) {
    return v * 60.0;
}, function (n) {
    return n;
}, function (v) {
    return v / 3600.0;
}, function (v) {
    return v * 1000.0;
}, function (v) {
    return v / 60.0;
}, function (n) {
    return n;
});
var timeValueMinutes = new TimeValue(function (v) {
    return v * 60.0;
}, function (v) {
    return v / 60000.0;
}, function (n) {
    return n;
}, function (v) {
    return v / 60.0;
}, function (v) {
    return v / 60.0;
}, function (v) {
    return v * 60000.0;
}, function (n) {
    return n;
}, function (v) {
    return v * 60.0;
});
var timeValueMilliseconds = new TimeValue(function (v) {
    return v * 3600000.0;
}, function (n) {
    return n;
}, function (v) {
    return v * 60000.0;
}, function (v) {
    return v * 1000.0;
}, function (v) {
    return v / 3600000.0;
}, function (n) {
    return n;
}, function (v) {
    return v / 60000.0;
}, function (v) {
    return v / 1000.0;
});
var timeValueHours = new TimeValue(function (n) {
    return n;
}, function (v) {
    return v / 3600000.0;
}, function (v) {
    return v / 60.0;
}, function (v) {
    return v / 3600.0;
}, function (n) {
    return n;
}, function (v) {
    return v * 3600000.0;
}, function (v) {
    return v * 60.0;
}, function (v) {
    return v * 3600.0;
});
var showSeconds = new Prelude.Show(function (v) {
    return "(Seconds " + (Prelude.show(Prelude.showNumber)(v) + ")");
});
var showMinutes = new Prelude.Show(function (v) {
    return "(Minutes " + (Prelude.show(Prelude.showNumber)(v) + ")");
});
var showMilliseconds = new Prelude.Show(function (v) {
    return "(Milliseconds " + (Prelude.show(Prelude.showNumber)(v) + ")");
});
var showHours = new Prelude.Show(function (v) {
    return "(Hours " + (Prelude.show(Prelude.showNumber)(v) + ")");
});
var semiringSeconds = new Prelude.Semiring(function (v) {
    return function (v1) {
        return v + v1;
    };
}, function (v) {
    return function (v1) {
        return v * v1;
    };
}, 1.0, 0.0);
var semiringMinutes = new Prelude.Semiring(function (v) {
    return function (v1) {
        return v + v1;
    };
}, function (v) {
    return function (v1) {
        return v * v1;
    };
}, 1.0, 0.0);
var semiringMilliseconds = new Prelude.Semiring(function (v) {
    return function (v1) {
        return v + v1;
    };
}, function (v) {
    return function (v1) {
        return v * v1;
    };
}, 1.0, 0.0);
var semiringHours = new Prelude.Semiring(function (v) {
    return function (v1) {
        return v + v1;
    };
}, function (v) {
    return function (v1) {
        return v * v1;
    };
}, 1.0, 0.0);
var ringSeconds = new Prelude.Ring(function () {
    return semiringSeconds;
}, function (v) {
    return function (v1) {
        return v - v1;
    };
});
var ringMinutes = new Prelude.Ring(function () {
    return semiringMinutes;
}, function (v) {
    return function (v1) {
        return v - v1;
    };
});
var ringMilliseconds = new Prelude.Ring(function () {
    return semiringMilliseconds;
}, function (v) {
    return function (v1) {
        return v - v1;
    };
});
var ringHours = new Prelude.Ring(function () {
    return semiringHours;
}, function (v) {
    return function (v1) {
        return v - v1;
    };
});
var moduloSemiringSeconds = new Prelude.ModuloSemiring(function () {
    return semiringSeconds;
}, function (v) {
    return function (v1) {
        return v / v1;
    };
}, function (v) {
    return function (v1) {
        return 0.0;
    };
});
var moduloSemiringMinutes = new Prelude.ModuloSemiring(function () {
    return semiringMinutes;
}, function (v) {
    return function (v1) {
        return v / v1;
    };
}, function (v) {
    return function (v1) {
        return 0.0;
    };
});
var moduloSemiringMilliseconds = new Prelude.ModuloSemiring(function () {
    return semiringMilliseconds;
}, function (v) {
    return function (v1) {
        return v / v1;
    };
}, function (v) {
    return function (v1) {
        return 0.0;
    };
});
var moduloSemiringHours = new Prelude.ModuloSemiring(function () {
    return semiringHours;
}, function (v) {
    return function (v1) {
        return v / v1;
    };
}, function (v) {
    return function (v1) {
        return 0.0;
    };
});
var fromSeconds = function (dict) {
    return dict.fromSeconds;
};
var fromMinutes = function (dict) {
    return dict.fromMinutes;
};
var fromMilliseconds = function (dict) {
    return dict.fromMilliseconds;
};
var fromHours = function (dict) {
    return dict.fromHours;
};
var eqSeconds = new Prelude.Eq(function (v) {
    return function (v1) {
        return v === v1;
    };
});
var ordSeconds = new Prelude.Ord(function () {
    return eqSeconds;
}, function (v) {
    return function (v1) {
        return Prelude.compare(Prelude.ordNumber)(v)(v1);
    };
});
var eqSecondOfMinute = new Prelude.Eq(function (v) {
    return function (v1) {
        return v === v1;
    };
});
var ordSecondOfMinute = new Prelude.Ord(function () {
    return eqSecondOfMinute;
}, function (v) {
    return function (v1) {
        return Prelude.compare(Prelude.ordInt)(v)(v1);
    };
});
var eqMinutes = new Prelude.Eq(function (v) {
    return function (v1) {
        return v === v1;
    };
});
var ordMinutes = new Prelude.Ord(function () {
    return eqMinutes;
}, function (v) {
    return function (v1) {
        return Prelude.compare(Prelude.ordNumber)(v)(v1);
    };
});
var eqMinuteOfHour = new Prelude.Eq(function (v) {
    return function (v1) {
        return v === v1;
    };
});
var ordMinuteOfHour = new Prelude.Ord(function () {
    return eqMinuteOfHour;
}, function (v) {
    return function (v1) {
        return Prelude.compare(Prelude.ordInt)(v)(v1);
    };
});
var eqMilliseconds = new Prelude.Eq(function (v) {
    return function (v1) {
        return v === v1;
    };
});
var ordMilliseconds = new Prelude.Ord(function () {
    return eqMilliseconds;
}, function (v) {
    return function (v1) {
        return Prelude.compare(Prelude.ordNumber)(v)(v1);
    };
});
var eqMillisecondOfSecond = new Prelude.Eq(function (v) {
    return function (v1) {
        return v === v1;
    };
});
var ordMillisecondOfSecond = new Prelude.Ord(function () {
    return eqMillisecondOfSecond;
}, function (v) {
    return function (v1) {
        return Prelude.compare(Prelude.ordInt)(v)(v1);
    };
});
var eqHours = new Prelude.Eq(function (v) {
    return function (v1) {
        return v === v1;
    };
});
var ordHours = new Prelude.Ord(function () {
    return eqHours;
}, function (v) {
    return function (v1) {
        return Prelude.compare(Prelude.ordNumber)(v)(v1);
    };
});
var eqHourOfDay = new Prelude.Eq(function (v) {
    return function (v1) {
        return v === v1;
    };
});
var ordHourOfDay = new Prelude.Ord(function () {
    return eqHourOfDay;
}, function (v) {
    return function (v1) {
        return Prelude.compare(Prelude.ordInt)(v)(v1);
    };
});
var divisionRingSeconds = new Prelude.DivisionRing(function () {
    return moduloSemiringSeconds;
}, function () {
    return ringSeconds;
});
var numSeconds = new Prelude.Num(function () {
    return divisionRingSeconds;
});
var divisionRingMinutes = new Prelude.DivisionRing(function () {
    return moduloSemiringMinutes;
}, function () {
    return ringMinutes;
});
var numMinutes = new Prelude.Num(function () {
    return divisionRingMinutes;
});
var divisionRingMilliseconds = new Prelude.DivisionRing(function () {
    return moduloSemiringMilliseconds;
}, function () {
    return ringMilliseconds;
});
var numMilliseconds = new Prelude.Num(function () {
    return divisionRingMilliseconds;
});
var divisionRingHours = new Prelude.DivisionRing(function () {
    return moduloSemiringHours;
}, function () {
    return ringHours;
});
var numHours = new Prelude.Num(function () {
    return divisionRingHours;
});
module.exports = {
    Milliseconds: Milliseconds, 
    MillisecondOfSecond: MillisecondOfSecond, 
    Seconds: Seconds, 
    SecondOfMinute: SecondOfMinute, 
    Minutes: Minutes, 
    MinuteOfHour: MinuteOfHour, 
    Hours: Hours, 
    HourOfDay: HourOfDay, 
    TimeValue: TimeValue, 
    fromMilliseconds: fromMilliseconds, 
    fromSeconds: fromSeconds, 
    fromMinutes: fromMinutes, 
    fromHours: fromHours, 
    toMilliseconds: toMilliseconds, 
    toSeconds: toSeconds, 
    toMinutes: toMinutes, 
    toHours: toHours, 
    eqHourOfDay: eqHourOfDay, 
    ordHourOfDay: ordHourOfDay, 
    eqHours: eqHours, 
    ordHours: ordHours, 
    semiringHours: semiringHours, 
    ringHours: ringHours, 
    moduloSemiringHours: moduloSemiringHours, 
    divisionRingHours: divisionRingHours, 
    numHours: numHours, 
    showHours: showHours, 
    eqMinuteOfHour: eqMinuteOfHour, 
    ordMinuteOfHour: ordMinuteOfHour, 
    eqMinutes: eqMinutes, 
    ordMinutes: ordMinutes, 
    semiringMinutes: semiringMinutes, 
    ringMinutes: ringMinutes, 
    moduloSemiringMinutes: moduloSemiringMinutes, 
    divisionRingMinutes: divisionRingMinutes, 
    numMinutes: numMinutes, 
    showMinutes: showMinutes, 
    eqSecondOfMinute: eqSecondOfMinute, 
    ordSecondOfMinute: ordSecondOfMinute, 
    eqSeconds: eqSeconds, 
    ordSeconds: ordSeconds, 
    semiringSeconds: semiringSeconds, 
    ringSeconds: ringSeconds, 
    moduloSemiringSeconds: moduloSemiringSeconds, 
    divisionRingSeconds: divisionRingSeconds, 
    numSeconds: numSeconds, 
    showSeconds: showSeconds, 
    eqMillisecondOfSecond: eqMillisecondOfSecond, 
    ordMillisecondOfSecond: ordMillisecondOfSecond, 
    eqMilliseconds: eqMilliseconds, 
    ordMilliseconds: ordMilliseconds, 
    semiringMilliseconds: semiringMilliseconds, 
    ringMilliseconds: ringMilliseconds, 
    moduloSemiringMilliseconds: moduloSemiringMilliseconds, 
    divisionRingMilliseconds: divisionRingMilliseconds, 
    numMilliseconds: numMilliseconds, 
    showMilliseconds: showMilliseconds, 
    timeValueHours: timeValueHours, 
    timeValueMinutes: timeValueMinutes, 
    timeValueSeconds: timeValueSeconds, 
    timeValueMilliseconds: timeValueMilliseconds
};
