// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Data_Maybe = require("../Data.Maybe");
var Data_Enum = require("../Data.Enum");
var HAVE_NOTHING = (function () {
    function HAVE_NOTHING() {

    };
    HAVE_NOTHING.value = new HAVE_NOTHING();
    return HAVE_NOTHING;
})();
var HAVE_METADATA = (function () {
    function HAVE_METADATA() {

    };
    HAVE_METADATA.value = new HAVE_METADATA();
    return HAVE_METADATA;
})();
var HAVE_CURRENT_DATA = (function () {
    function HAVE_CURRENT_DATA() {

    };
    HAVE_CURRENT_DATA.value = new HAVE_CURRENT_DATA();
    return HAVE_CURRENT_DATA;
})();
var HAVE_FUTURE_DATA = (function () {
    function HAVE_FUTURE_DATA() {

    };
    HAVE_FUTURE_DATA.value = new HAVE_FUTURE_DATA();
    return HAVE_FUTURE_DATA;
})();
var HAVE_ENOUGH_DATA = (function () {
    function HAVE_ENOUGH_DATA() {

    };
    HAVE_ENOUGH_DATA.value = new HAVE_ENOUGH_DATA();
    return HAVE_ENOUGH_DATA;
})();
var toEnumReadyState = function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(HAVE_NOTHING.value);
    };
    if (v === 1) {
        return new Data_Maybe.Just(HAVE_METADATA.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(HAVE_CURRENT_DATA.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(HAVE_FUTURE_DATA.value);
    };
    if (v === 4) {
        return new Data_Maybe.Just(HAVE_ENOUGH_DATA.value);
    };
    return Data_Maybe.Nothing.value;
};
var showReadyState = new Prelude.Show(function (v) {
    if (v instanceof HAVE_NOTHING) {
        return "HAVE_NOTHING";
    };
    if (v instanceof HAVE_METADATA) {
        return "HAVE_METADATA";
    };
    if (v instanceof HAVE_CURRENT_DATA) {
        return "HAVE_CURRENT_DATA";
    };
    if (v instanceof HAVE_FUTURE_DATA) {
        return "HAVE_FUTURE_DATA";
    };
    if (v instanceof HAVE_ENOUGH_DATA) {
        return "HAVE_ENOUGH_DATA";
    };
    throw new Error("Failed pattern match at DOM.HTML.HTMLMediaElement.ReadyState line 39, column 3 - line 40, column 3: " + [ v.constructor.name ]);
});
var fromEnumReadyState = function (v) {
    if (v instanceof HAVE_NOTHING) {
        return 0;
    };
    if (v instanceof HAVE_METADATA) {
        return 1;
    };
    if (v instanceof HAVE_CURRENT_DATA) {
        return 2;
    };
    if (v instanceof HAVE_FUTURE_DATA) {
        return 3;
    };
    if (v instanceof HAVE_ENOUGH_DATA) {
        return 4;
    };
    throw new Error("Failed pattern match at DOM.HTML.HTMLMediaElement.ReadyState line 54, column 1 - line 55, column 1: " + [ v.constructor.name ]);
};
var eqReadyState = new Prelude.Eq(function (v) {
    return function (v1) {
        if (v instanceof HAVE_NOTHING && v1 instanceof HAVE_NOTHING) {
            return true;
        };
        if (v instanceof HAVE_METADATA && v1 instanceof HAVE_METADATA) {
            return true;
        };
        if (v instanceof HAVE_CURRENT_DATA && v1 instanceof HAVE_CURRENT_DATA) {
            return true;
        };
        if (v instanceof HAVE_FUTURE_DATA && v1 instanceof HAVE_FUTURE_DATA) {
            return true;
        };
        if (v instanceof HAVE_ENOUGH_DATA && v1 instanceof HAVE_ENOUGH_DATA) {
            return true;
        };
        return false;
    };
});
var ordReadyState = new Prelude.Ord(function () {
    return eqReadyState;
}, function (x) {
    return function (y) {
        return Prelude.compare(Prelude.ordInt)(fromEnumReadyState(x))(fromEnumReadyState(y));
    };
});
var boundedReadyState = new Prelude.Bounded(HAVE_NOTHING.value, HAVE_ENOUGH_DATA.value);
var enumReadyState = new Data_Enum.Enum(function () {
    return boundedReadyState;
}, 5, fromEnumReadyState, Data_Enum.defaultPred(toEnumReadyState)(fromEnumReadyState), Data_Enum.defaultSucc(toEnumReadyState)(fromEnumReadyState), toEnumReadyState);
var boundedOrdReadyState = new Prelude.BoundedOrd(function () {
    return boundedReadyState;
}, function () {
    return ordReadyState;
});
module.exports = {
    HAVE_NOTHING: HAVE_NOTHING, 
    HAVE_METADATA: HAVE_METADATA, 
    HAVE_CURRENT_DATA: HAVE_CURRENT_DATA, 
    HAVE_FUTURE_DATA: HAVE_FUTURE_DATA, 
    HAVE_ENOUGH_DATA: HAVE_ENOUGH_DATA, 
    eqReadyState: eqReadyState, 
    ordReadyState: ordReadyState, 
    boundedReadyState: boundedReadyState, 
    boundedOrdReadyState: boundedOrdReadyState, 
    enumReadyState: enumReadyState, 
    showReadyState: showReadyState
};
