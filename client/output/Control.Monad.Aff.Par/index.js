// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Aff_AVar = require("../Control.Monad.Aff.AVar");
var Control_Plus = require("../Control.Plus");
var Data_Either = require("../Data.Either");
var Data_Monoid = require("../Data.Monoid");
var Par = function (x) {
    return x;
};
var runPar = function (v) {
    return v;
};
var functorPar = new Prelude.Functor(function (f) {
    return function (v) {
        return Prelude["<$>"](Control_Monad_Aff.functorAff)(f)(v);
    };
});
var applyPar = new Prelude.Apply(function () {
    return functorPar;
}, function (v) {
    return function (v1) {
        return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v2) {
            return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v3) {
                return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Prelude[">>="](Control_Monad_Aff.bindAff)(v)(Control_Monad_Aff_AVar.putVar(v2))))(function (v4) {
                    return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Prelude[">>="](Control_Monad_Aff.bindAff)(v1)(Control_Monad_Aff_AVar.putVar(v3))))(function (v5) {
                        return Control_Monad_Aff.cancelWith(Prelude["<*>"](Control_Monad_Aff.applyAff)(Control_Monad_Aff_AVar.takeVar(v2))(Control_Monad_Aff_AVar.takeVar(v3)))(Prelude["<>"](Control_Monad_Aff.semigroupCanceler)(v4)(v5));
                    });
                });
            });
        });
    };
});
var semigroupPar = function (dictSemigroup) {
    return new Prelude.Semigroup(function (a) {
        return function (b) {
            return Prelude["<*>"](applyPar)(Prelude["<$>"](functorPar)(Prelude.append(dictSemigroup))(a))(b);
        };
    });
};
var applicativePar = new Prelude.Applicative(function () {
    return applyPar;
}, function (v) {
    return Prelude.pure(Control_Monad_Aff.applicativeAff)(v);
});
var monoidPar = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupPar(dictMonoid["__superclass_Prelude.Semigroup_0"]());
    }, Prelude.pure(applicativePar)(Data_Monoid.mempty(dictMonoid)));
};
var altPar = new Control_Alt.Alt(function () {
    return functorPar;
}, function (v) {
    return function (v1) {
        var maybeKill = function (va) {
            return function (ve) {
                return function (err) {
                    return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(ve))(function (v2) {
                        return Prelude.bind(Control_Monad_Aff.bindAff)((function () {
                            var $29 = v2 === 1;
                            if ($29) {
                                return Control_Monad_Aff_AVar.killVar(va)(err);
                            };
                            if (!$29) {
                                return Prelude["return"](Control_Monad_Aff.applicativeAff)(Prelude.unit);
                            };
                            throw new Error("Failed pattern match at Control.Monad.Aff.Par line 51, column 10 - line 52, column 10: " + [ $29.constructor.name ]);
                        })())(function () {
                            return Control_Monad_Aff_AVar.putVar(ve)(v2 + 1 | 0);
                        });
                    });
                };
            };
        };
        return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v2) {
            return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar["makeVar'"](0))(function (v3) {
                return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Prelude[">>="](Control_Monad_Aff.bindAff)(Control_Monad_Aff.attempt(v))(Data_Either.either(maybeKill(v2)(v3))(Control_Monad_Aff_AVar.putVar(v2)))))(function (v4) {
                    return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Prelude[">>="](Control_Monad_Aff.bindAff)(Control_Monad_Aff.attempt(v1))(Data_Either.either(maybeKill(v2)(v3))(Control_Monad_Aff_AVar.putVar(v2)))))(function (v5) {
                        return Control_Monad_Aff.cancelWith(Control_Monad_Aff_AVar.takeVar(v2))(Prelude["<>"](Control_Monad_Aff.semigroupCanceler)(v4)(v5));
                    });
                });
            });
        });
    };
});
var plusPar = new Control_Plus.Plus(function () {
    return altPar;
}, Control_Plus.empty(Control_Monad_Aff.plusAff));
var alternativePar = new Control_Alternative.Alternative(function () {
    return plusPar;
}, function () {
    return applicativePar;
});
module.exports = {
    Par: Par, 
    runPar: runPar, 
    semigroupPar: semigroupPar, 
    monoidPar: monoidPar, 
    functorPar: functorPar, 
    applyPar: applyPar, 
    applicativePar: applicativePar, 
    altPar: altPar, 
    plusPar: plusPar, 
    alternativePar: alternativePar
};
