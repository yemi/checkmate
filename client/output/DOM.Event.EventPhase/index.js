// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Data_Enum = require("../Data.Enum");
var Data_Maybe = require("../Data.Maybe");
var None = (function () {
    function None() {

    };
    None.value = new None();
    return None;
})();
var Capturing = (function () {
    function Capturing() {

    };
    Capturing.value = new Capturing();
    return Capturing;
})();
var AtTarget = (function () {
    function AtTarget() {

    };
    AtTarget.value = new AtTarget();
    return AtTarget;
})();
var Bubbling = (function () {
    function Bubbling() {

    };
    Bubbling.value = new Bubbling();
    return Bubbling;
})();
var toEnumEventPhase = function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(None.value);
    };
    if (v === 1) {
        return new Data_Maybe.Just(Capturing.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(AtTarget.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(Bubbling.value);
    };
    return Data_Maybe.Nothing.value;
};
var fromEnumEventPhase = function (v) {
    if (v instanceof None) {
        return 0;
    };
    if (v instanceof Capturing) {
        return 1;
    };
    if (v instanceof AtTarget) {
        return 2;
    };
    if (v instanceof Bubbling) {
        return 3;
    };
    throw new Error("Failed pattern match at DOM.Event.EventPhase line 45, column 1 - line 46, column 1: " + [ v.constructor.name ]);
};
var eqEventPhase = new Prelude.Eq(function (v) {
    return function (v1) {
        if (v instanceof None && v1 instanceof None) {
            return true;
        };
        if (v instanceof Capturing && v1 instanceof Capturing) {
            return true;
        };
        if (v instanceof AtTarget && v1 instanceof AtTarget) {
            return true;
        };
        if (v instanceof Bubbling && v1 instanceof Bubbling) {
            return true;
        };
        return false;
    };
});
var ordEventPhase = new Prelude.Ord(function () {
    return eqEventPhase;
}, function (x) {
    return function (y) {
        return Prelude.compare(Prelude.ordInt)(fromEnumEventPhase(x))(fromEnumEventPhase(y));
    };
});
var boundedEventPhase = new Prelude.Bounded(None.value, Bubbling.value);
var boundedOrdEventPhase = new Prelude.BoundedOrd(function () {
    return boundedEventPhase;
}, function () {
    return ordEventPhase;
});
var enumEventPhase = new Data_Enum.Enum(function () {
    return boundedEventPhase;
}, 4, fromEnumEventPhase, Data_Enum.defaultPred(toEnumEventPhase)(fromEnumEventPhase), Data_Enum.defaultSucc(toEnumEventPhase)(fromEnumEventPhase), toEnumEventPhase);
module.exports = {
    None: None, 
    Capturing: Capturing, 
    AtTarget: AtTarget, 
    Bubbling: Bubbling, 
    eqEventPhase: eqEventPhase, 
    ordEventPhase: ordEventPhase, 
    boundedEventPhase: boundedEventPhase, 
    boundedOrdEventPhase: boundedOrdEventPhase, 
    enumEventPhase: enumEventPhase
};
