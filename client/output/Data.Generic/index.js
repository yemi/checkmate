// Generated by psc version 0.8.5.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Data_Either = require("../Data.Either");
var Data_Maybe = require("../Data.Maybe");
var Data_Tuple = require("../Data.Tuple");
var Data_Traversable = require("../Data.Traversable");
var Data_Foldable = require("../Data.Foldable");
var Data_Array = require("../Data.Array");
var Data_String = require("../Data.String");
var Type_Proxy = require("../Type.Proxy");
var Data_Monoid = require("../Data.Monoid");
var SProd = (function () {
    function SProd(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SProd.create = function (value0) {
        return function (value1) {
            return new SProd(value0, value1);
        };
    };
    return SProd;
})();
var SRecord = (function () {
    function SRecord(value0) {
        this.value0 = value0;
    };
    SRecord.create = function (value0) {
        return new SRecord(value0);
    };
    return SRecord;
})();
var SNumber = (function () {
    function SNumber(value0) {
        this.value0 = value0;
    };
    SNumber.create = function (value0) {
        return new SNumber(value0);
    };
    return SNumber;
})();
var SBoolean = (function () {
    function SBoolean(value0) {
        this.value0 = value0;
    };
    SBoolean.create = function (value0) {
        return new SBoolean(value0);
    };
    return SBoolean;
})();
var SInt = (function () {
    function SInt(value0) {
        this.value0 = value0;
    };
    SInt.create = function (value0) {
        return new SInt(value0);
    };
    return SInt;
})();
var SString = (function () {
    function SString(value0) {
        this.value0 = value0;
    };
    SString.create = function (value0) {
        return new SString(value0);
    };
    return SString;
})();
var SChar = (function () {
    function SChar(value0) {
        this.value0 = value0;
    };
    SChar.create = function (value0) {
        return new SChar(value0);
    };
    return SChar;
})();
var SArray = (function () {
    function SArray(value0) {
        this.value0 = value0;
    };
    SArray.create = function (value0) {
        return new SArray(value0);
    };
    return SArray;
})();
var SigProd = (function () {
    function SigProd(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SigProd.create = function (value0) {
        return function (value1) {
            return new SigProd(value0, value1);
        };
    };
    return SigProd;
})();
var SigRecord = (function () {
    function SigRecord(value0) {
        this.value0 = value0;
    };
    SigRecord.create = function (value0) {
        return new SigRecord(value0);
    };
    return SigRecord;
})();
var SigNumber = (function () {
    function SigNumber() {

    };
    SigNumber.value = new SigNumber();
    return SigNumber;
})();
var SigBoolean = (function () {
    function SigBoolean() {

    };
    SigBoolean.value = new SigBoolean();
    return SigBoolean;
})();
var SigInt = (function () {
    function SigInt() {

    };
    SigInt.value = new SigInt();
    return SigInt;
})();
var SigString = (function () {
    function SigString() {

    };
    SigString.value = new SigString();
    return SigString;
})();
var SigChar = (function () {
    function SigChar() {

    };
    SigChar.value = new SigChar();
    return SigChar;
})();
var SigArray = (function () {
    function SigArray(value0) {
        this.value0 = value0;
    };
    SigArray.create = function (value0) {
        return new SigArray(value0);
    };
    return SigArray;
})();
var Generic = function (fromSpine, toSignature, toSpine) {
    this.fromSpine = fromSpine;
    this.toSignature = toSignature;
    this.toSpine = toSpine;
};
var toSpine = function (dict) {
    return dict.toSpine;
};
var toSignature = function (dict) {
    return dict.toSignature;
};
var showArray = function (f) {
    return function (xs) {
        return "[ " + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(Prelude.map(Prelude.functorArray)(f)(xs)) + " ]");
    };
};
var isValidSpine = function (v) {
    return function (v1) {
        if (v instanceof SigBoolean && v1 instanceof SBoolean) {
            return true;
        };
        if (v instanceof SigNumber && v1 instanceof SNumber) {
            return true;
        };
        if (v instanceof SigInt && v1 instanceof SInt) {
            return true;
        };
        if (v instanceof SigString && v1 instanceof SString) {
            return true;
        };
        if (v instanceof SigChar && v1 instanceof SChar) {
            return true;
        };
        if (v instanceof SigArray && v1 instanceof SArray) {
            return Data_Foldable.all(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(function ($193) {
                return isValidSpine(v.value0(Prelude.unit))((function (v2) {
                    return v2(Prelude.unit);
                })($193));
            })(v1.value0);
        };
        if (v instanceof SigProd && v1 instanceof SProd) {
            var $54 = Data_Foldable.find(Data_Foldable.foldableArray)(function ($194) {
                return (function (v2) {
                    return v1.value0 === v2;
                })((function (v2) {
                    return v2.sigConstructor;
                })($194));
            })(v.value1);
            if ($54 instanceof Data_Maybe.Nothing) {
                return false;
            };
            if ($54 instanceof Data_Maybe.Just) {
                return Data_Foldable.and(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(Data_Array.zipWith(function (sig) {
                    return function (spine) {
                        return isValidSpine(sig(Prelude.unit))(spine(Prelude.unit));
                    };
                })($54.value0.sigValues)(v1.value1));
            };
            throw new Error("Failed pattern match at Data.Generic line 132, column 3 - line 136, column 1: " + [ $54.constructor.name ]);
        };
        if (v instanceof SigRecord && v1 instanceof SRecord) {
            return Data_Foldable.and(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(Data_Array.zipWith(function (sig) {
                return function (val) {
                    return isValidSpine(sig.recValue(Prelude.unit))(val.recValue(Prelude.unit));
                };
            })(Data_Array.sortBy(function (a) {
                return function (b) {
                    return Prelude.compare(Prelude.ordString)(a.recLabel)(b.recLabel);
                };
            })(v.value0))(Data_Array.sortBy(function (a) {
                return function (b) {
                    return Prelude.compare(Prelude.ordString)(a.recLabel)(b.recLabel);
                };
            })(v1.value0)));
        };
        return false;
    };
};
var genericString = new Generic(function (v) {
    if (v instanceof SString) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
}, function (v) {
    return SigString.value;
}, function (x) {
    return new SString(x);
});
var genericShowPrec = function (d) {
    return function (v) {
        if (v instanceof SProd) {
            var showParen = function (v1) {
                return function (x) {
                    if (!v1) {
                        return x;
                    };
                    if (v1) {
                        return "(" + (x + ")");
                    };
                    throw new Error("Failed pattern match at Data.Generic line 240, column 9 - line 241, column 9: " + [ v1.constructor.name, x.constructor.name ]);
                };
            };
            var $69 = Data_Array["null"](v.value1);
            if ($69) {
                return v.value0;
            };
            if (!$69) {
                return showParen(d > 10)(v.value0 + (" " + Data_String.joinWith(" ")(Prelude.map(Prelude.functorArray)(function (x) {
                    return genericShowPrec(11)(x(Prelude.unit));
                })(v.value1))));
            };
            throw new Error("Failed pattern match at Data.Generic line 237, column 5 - line 240, column 3: " + [ $69.constructor.name ]);
        };
        if (v instanceof SRecord) {
            return "{" + (Data_String.joinWith(", ")(Prelude.map(Prelude.functorArray)(function (x) {
                return x.recLabel + (": " + genericShowPrec(0)(x.recValue(Prelude.unit)));
            })(v.value0)) + "}");
        };
        if (v instanceof SBoolean) {
            return Prelude.show(Prelude.showBoolean)(v.value0);
        };
        if (v instanceof SInt) {
            return Prelude.show(Prelude.showInt)(v.value0);
        };
        if (v instanceof SNumber) {
            return Prelude.show(Prelude.showNumber)(v.value0);
        };
        if (v instanceof SString) {
            return Prelude.show(Prelude.showString)(v.value0);
        };
        if (v instanceof SChar) {
            return Prelude.show(Prelude.showChar)(v.value0);
        };
        if (v instanceof SArray) {
            return "[" + (Data_String.joinWith(", ")(Prelude.map(Prelude.functorArray)(function (x) {
                return genericShowPrec(0)(x(Prelude.unit));
            })(v.value0)) + "]");
        };
        throw new Error("Failed pattern match at Data.Generic line 236, column 1 - line 243, column 1: " + [ d.constructor.name, v.constructor.name ]);
    };
};
var genericNumber = new Generic(function (v) {
    if (v instanceof SNumber) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
}, function (v) {
    return SigNumber.value;
}, function (x) {
    return new SNumber(x);
});
var genericInt = new Generic(function (v) {
    if (v instanceof SInt) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
}, function (v) {
    return SigInt.value;
}, function (x) {
    return new SInt(x);
});
var genericChar = new Generic(function (v) {
    if (v instanceof SChar) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
}, function (v) {
    return SigChar.value;
}, function (x) {
    return new SChar(x);
});
var genericBool = new Generic(function (v) {
    if (v instanceof SBoolean) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
}, function (v) {
    return SigBoolean.value;
}, function (b) {
    return new SBoolean(b);
});
var gShow = function (dictGeneric) {
    return function ($195) {
        return genericShowPrec(0)(toSpine(dictGeneric)($195));
    };
};
var fromSpine = function (dict) {
    return dict.fromSpine;
};
var force = function (v) {
    return v(Prelude.unit);
};
var showSignature = function (sig) {
    var needsParen = function (s) {
        if (s instanceof SigProd) {
            return true;
        };
        if (s instanceof SigRecord) {
            return true;
        };
        if (s instanceof SigNumber) {
            return false;
        };
        if (s instanceof SigBoolean) {
            return false;
        };
        if (s instanceof SigInt) {
            return false;
        };
        if (s instanceof SigString) {
            return false;
        };
        if (s instanceof SigChar) {
            return false;
        };
        if (s instanceof SigArray) {
            return true;
        };
        throw new Error("Failed pattern match at Data.Generic line 79, column 18 - line 89, column 1: " + [ s.constructor.name ]);
    };
    var paren = function (s) {
        if (needsParen(s)) {
            return "(" + (showSignature(s) + ")");
        };
        if (Prelude.otherwise) {
            return showSignature(s);
        };
        throw new Error("Failed pattern match at Data.Generic line 55, column 1 - line 89, column 1: " + [ s.constructor.name ]);
    };
    return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)((function () {
        if (sig instanceof SigProd) {
            return [ "SigProd ", Prelude.show(Prelude.showString)(sig.value0), " ", showArray(showDataConstructor)(sig.value1) ];
        };
        if (sig instanceof SigRecord) {
            return [ "SigRecord ", showArray(showLabel)(sig.value0) ];
        };
        if (sig instanceof SigNumber) {
            return [ "SigNumber" ];
        };
        if (sig instanceof SigBoolean) {
            return [ "SigBoolean" ];
        };
        if (sig instanceof SigInt) {
            return [ "SigInt" ];
        };
        if (sig instanceof SigString) {
            return [ "SigString" ];
        };
        if (sig instanceof SigChar) {
            return [ "SigChar" ];
        };
        if (sig instanceof SigArray) {
            return [ "SigArray ", paren(force(sig.value0)) ];
        };
        throw new Error("Failed pattern match at Data.Generic line 56, column 3 - line 74, column 3: " + [ sig.constructor.name ]);
    })());
};
var showLabel = function (l) {
    return "{ recLabel: " + (Prelude.show(Prelude.showString)(l.recLabel) + (", recValue: " + (showSignature(force(l.recValue)) + " }")));
};
var showDataConstructor = function (dc) {
    return "{ sigConstructor: " + (Prelude.show(Prelude.showString)(dc.sigConstructor) + (", sigValues: " + (showArray(function ($196) {
        return showSignature(force($196));
    })(dc.sigValues) + "}")));
};
var showGenericSignature = new Prelude.Show(showSignature);
var eqGeneric = new Prelude.Eq(function (v) {
    return function (v1) {
        if (v instanceof SProd && v1 instanceof SProd) {
            return v.value0 === v1.value0 && (Data_Array.length(v.value1) === Data_Array.length(v1.value1) && $foreign.zipAll(function (x) {
                return function (y) {
                    return Prelude["=="](eqGeneric)(x(Prelude.unit))(y(Prelude.unit));
                };
            })(v.value1)(v1.value1));
        };
        if (v instanceof SRecord && v1 instanceof SRecord) {
            var go = function (x) {
                return function (y) {
                    return x.recLabel === y.recLabel && Prelude["=="](eqGeneric)(x.recValue(Prelude.unit))(y.recValue(Prelude.unit));
                };
            };
            return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(go)(v.value0)(v1.value0);
        };
        if (v instanceof SInt && v1 instanceof SInt) {
            return v.value0 === v1.value0;
        };
        if (v instanceof SNumber && v1 instanceof SNumber) {
            return v.value0 === v1.value0;
        };
        if (v instanceof SBoolean && v1 instanceof SBoolean) {
            return v.value0 === v1.value0;
        };
        if (v instanceof SChar && v1 instanceof SChar) {
            return v.value0 === v1.value0;
        };
        if (v instanceof SString && v1 instanceof SString) {
            return v.value0 === v1.value0;
        };
        if (v instanceof SArray && v1 instanceof SArray) {
            return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(function (x) {
                return function (y) {
                    return Prelude["=="](eqGeneric)(x(Prelude.unit))(y(Prelude.unit));
                };
            })(v.value0)(v1.value0);
        };
        return false;
    };
});
var gEq = function (dictGeneric) {
    return function (x) {
        return function (y) {
            return Prelude["=="](eqGeneric)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
        };
    };
};
var ordGeneric = new Prelude.Ord(function () {
    return eqGeneric;
}, function (v) {
    return function (v1) {
        if (v instanceof SProd && v1 instanceof SProd) {
            var $120 = Prelude.compare(Prelude.ordString)(v.value0)(v1.value0);
            if ($120 instanceof Prelude.EQ) {
                return Prelude.compare(Prelude.ordInt)(0)($foreign.zipCompare(function (x) {
                    return function (y) {
                        var $121 = Prelude.compare(ordGeneric)(x(Prelude.unit))(y(Prelude.unit));
                        if ($121 instanceof Prelude.EQ) {
                            return 0;
                        };
                        if ($121 instanceof Prelude.LT) {
                            return 1;
                        };
                        if ($121 instanceof Prelude.GT) {
                            return -1;
                        };
                        throw new Error("Failed pattern match at Data.Generic line 280, column 49 - line 283, column 59: " + [ $121.constructor.name ]);
                    };
                })(v.value1)(v1.value1));
            };
            return $120;
        };
        if (v instanceof SProd) {
            return Prelude.LT.value;
        };
        if (v1 instanceof SProd) {
            return Prelude.GT.value;
        };
        if (v instanceof SRecord && v1 instanceof SRecord) {
            var go = function (x) {
                return function (y) {
                    var $130 = Prelude.compare(Prelude.ordString)(x.recLabel)(y.recLabel);
                    if ($130 instanceof Prelude.EQ) {
                        var $131 = Prelude.compare(ordGeneric)(x.recValue(Prelude.unit))(y.recValue(Prelude.unit));
                        if ($131 instanceof Prelude.EQ) {
                            return 0;
                        };
                        if ($131 instanceof Prelude.LT) {
                            return 1;
                        };
                        if ($131 instanceof Prelude.GT) {
                            return -1;
                        };
                        throw new Error("Failed pattern match at Data.Generic line 289, column 32 - line 293, column 26: " + [ $131.constructor.name ]);
                    };
                    if ($130 instanceof Prelude.LT) {
                        return 1;
                    };
                    if ($130 instanceof Prelude.GT) {
                        return -1;
                    };
                    throw new Error("Failed pattern match at Data.Generic line 288, column 24 - line 295, column 5: " + [ $130.constructor.name ]);
                };
            };
            return Prelude.compare(Prelude.ordInt)(0)($foreign.zipCompare(go)(v.value0)(v1.value0));
        };
        if (v instanceof SRecord) {
            return Prelude.LT.value;
        };
        if (v1 instanceof SRecord) {
            return Prelude.GT.value;
        };
        if (v instanceof SInt && v1 instanceof SInt) {
            return Prelude.compare(Prelude.ordInt)(v.value0)(v1.value0);
        };
        if (v instanceof SInt) {
            return Prelude.LT.value;
        };
        if (v1 instanceof SInt) {
            return Prelude.GT.value;
        };
        if (v instanceof SBoolean && v1 instanceof SBoolean) {
            return Prelude.compare(Prelude.ordBoolean)(v.value0)(v1.value0);
        };
        if (v instanceof SBoolean) {
            return Prelude.LT.value;
        };
        if (v1 instanceof SBoolean) {
            return Prelude.GT.value;
        };
        if (v instanceof SNumber && v1 instanceof SNumber) {
            return Prelude.compare(Prelude.ordNumber)(v.value0)(v1.value0);
        };
        if (v instanceof SNumber) {
            return Prelude.LT.value;
        };
        if (v1 instanceof SNumber) {
            return Prelude.GT.value;
        };
        if (v instanceof SString && v1 instanceof SString) {
            return Prelude.compare(Prelude.ordString)(v.value0)(v1.value0);
        };
        if (v instanceof SString) {
            return Prelude.LT.value;
        };
        if (v1 instanceof SString) {
            return Prelude.GT.value;
        };
        if (v instanceof SChar && v1 instanceof SChar) {
            return Prelude.compare(Prelude.ordChar)(v.value0)(v1.value0);
        };
        if (v instanceof SChar) {
            return Prelude.LT.value;
        };
        if (v1 instanceof SChar) {
            return Prelude.GT.value;
        };
        if (v instanceof SArray && v1 instanceof SArray) {
            return Prelude.compare(Prelude.ordInt)(0)($foreign.zipCompare(function (x) {
                return function (y) {
                    var $156 = Prelude.compare(ordGeneric)(x(Prelude.unit))(y(Prelude.unit));
                    if ($156 instanceof Prelude.EQ) {
                        return 0;
                    };
                    if ($156 instanceof Prelude.LT) {
                        return 1;
                    };
                    if ($156 instanceof Prelude.GT) {
                        return -1;
                    };
                    throw new Error("Failed pattern match at Data.Generic line 312, column 71 - line 315, column 81: " + [ $156.constructor.name ]);
                };
            })(v.value0)(v1.value0));
        };
        throw new Error("Failed pattern match at Data.Generic line 278, column 5 - line 285, column 5: " + [ v.constructor.name, v1.constructor.name ]);
    };
});
var gCompare = function (dictGeneric) {
    return function (x) {
        return function (y) {
            return Prelude.compare(ordGeneric)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
        };
    };
};
var anyProxy = (Type_Proxy["Proxy"]).value;
var genericArray = function (dictGeneric) {
    return new Generic(function (v) {
        if (v instanceof SArray) {
            return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(function ($197) {
                return fromSpine(dictGeneric)((function (v1) {
                    return v1(Prelude.unit);
                })($197));
            })(v.value0);
        };
        return Data_Maybe.Nothing.value;
    }, function (x) {
        var lowerProxy = function (v) {
            return anyProxy;
        };
        return new SigArray(function (unit) {
            return toSignature(dictGeneric)(lowerProxy(x));
        });
    }, function (xs) {
        return new SArray(Prelude["<$>"](Prelude.functorArray)(function (x) {
            return function (y) {
                return toSpine(dictGeneric)(x);
            };
        })(xs));
    });
};
var genericEither = function (dictGeneric) {
    return function (dictGeneric1) {
        return new Generic(function (v) {
            if (v instanceof SProd && (v.value0 === "Data.Either.Left" && v.value1.length === 1)) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Either.Left.create)(fromSpine(dictGeneric)(v.value1[0](Prelude.unit)));
            };
            if (v instanceof SProd && (v.value0 === "Data.Either.Right" && v.value1.length === 1)) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Either.Right.create)(fromSpine(dictGeneric1)(v.value1[0](Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        }, function (x) {
            var rproxy = function (v) {
                return anyProxy;
            };
            var lproxy = function (v) {
                return anyProxy;
            };
            return new SigProd("Data.Either.Either", [ {
                sigConstructor: "Data.Either.Left", 
                sigValues: [ function (u) {
                    return toSignature(dictGeneric)(lproxy(x));
                } ]
            }, {
                sigConstructor: "Data.Either.Right", 
                sigValues: [ function (u) {
                    return toSignature(dictGeneric1)(rproxy(x));
                } ]
            } ]);
        }, function (v) {
            if (v instanceof Data_Either.Left) {
                return new SProd("Data.Either.Left", [ function (u) {
                    return toSpine(dictGeneric)(v.value0);
                } ]);
            };
            if (v instanceof Data_Either.Right) {
                return new SProd("Data.Either.Right", [ function (u) {
                    return toSpine(dictGeneric1)(v.value0);
                } ]);
            };
            throw new Error("Failed pattern match at Data.Generic line 215, column 5 - line 216, column 5: " + [ v.constructor.name ]);
        });
    };
};
var genericMaybe = function (dictGeneric) {
    return new Generic(function (v) {
        if (v instanceof SProd && (v.value0 === "Data.Maybe.Just" && v.value1.length === 1)) {
            return Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(fromSpine(dictGeneric)(v.value1[0](Prelude.unit)));
        };
        if (v instanceof SProd && (v.value0 === "Data.Maybe.Nothing" && v.value1.length === 0)) {
            return Prelude["return"](Data_Maybe.applicativeMaybe)(Data_Maybe.Nothing.value);
        };
        return Data_Maybe.Nothing.value;
    }, function (x) {
        var mbProxy = function (v) {
            return anyProxy;
        };
        return new SigProd("Data.Maybe.Maybe", [ {
            sigConstructor: "Data.Maybe.Just", 
            sigValues: [ function (u) {
                return toSignature(dictGeneric)(mbProxy(x));
            } ]
        }, {
            sigConstructor: "Data.Maybe.Nothing", 
            sigValues: [  ]
        } ]);
    }, function (v) {
        if (v instanceof Data_Maybe.Just) {
            return new SProd("Data.Maybe.Just", [ function (u) {
                return toSpine(dictGeneric)(v.value0);
            } ]);
        };
        if (v instanceof Data_Maybe.Nothing) {
            return new SProd("Data.Maybe.Nothing", [  ]);
        };
        throw new Error("Failed pattern match at Data.Generic line 198, column 7 - line 199, column 7: " + [ v.constructor.name ]);
    });
};
var genericTuple = function (dictGeneric) {
    return function (dictGeneric1) {
        return new Generic(function (v) {
            if (v instanceof SProd && (v.value0 === "Data.Tuple.Tuple" && v.value1.length === 2)) {
                return Prelude["<*>"](Data_Maybe.applyMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(fromSpine(dictGeneric)(v.value1[0](Prelude.unit))))(fromSpine(dictGeneric1)(v.value1[1](Prelude.unit)));
            };
            return Data_Maybe.Nothing.value;
        }, function (x) {
            var sndProxy = function (v) {
                return anyProxy;
            };
            var fstProxy = function (v) {
                return anyProxy;
            };
            return new SigProd("Data.Tuple.Tuple", [ {
                sigConstructor: "Data.Tuple.Tuple", 
                sigValues: [ function (u) {
                    return toSignature(dictGeneric)(fstProxy(x));
                }, function (u) {
                    return toSignature(dictGeneric1)(sndProxy(x));
                } ]
            } ]);
        }, function (v) {
            return new SProd("Data.Tuple.Tuple", [ function (u) {
                return toSpine(dictGeneric)(v.value0);
            }, function (u) {
                return toSpine(dictGeneric1)(v.value1);
            } ]);
        });
    };
};
module.exports = {
    SigProd: SigProd, 
    SigRecord: SigRecord, 
    SigNumber: SigNumber, 
    SigBoolean: SigBoolean, 
    SigInt: SigInt, 
    SigString: SigString, 
    SigChar: SigChar, 
    SigArray: SigArray, 
    SProd: SProd, 
    SRecord: SRecord, 
    SNumber: SNumber, 
    SBoolean: SBoolean, 
    SInt: SInt, 
    SString: SString, 
    SChar: SChar, 
    SArray: SArray, 
    Generic: Generic, 
    gCompare: gCompare, 
    gEq: gEq, 
    gShow: gShow, 
    isValidSpine: isValidSpine, 
    showDataConstructor: showDataConstructor, 
    showSignature: showSignature, 
    fromSpine: fromSpine, 
    toSignature: toSignature, 
    toSpine: toSpine, 
    showGenericSignature: showGenericSignature, 
    genericNumber: genericNumber, 
    genericInt: genericInt, 
    genericString: genericString, 
    genericChar: genericChar, 
    genericBool: genericBool, 
    genericArray: genericArray, 
    genericTuple: genericTuple, 
    genericMaybe: genericMaybe, 
    genericEither: genericEither, 
    eqGeneric: eqGeneric, 
    ordGeneric: ordGeneric
};
