// Generated by psc version 0.8.5.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Control_Comonad = require("../Control.Comonad");
var Control_Extend = require("../Control.Extend");
var Data_Monoid = require("../Data.Monoid");
var Control_Lazy = require("../Control.Lazy");
var showLazy = function (dictShow) {
    return new Prelude.Show(function (x) {
        return "Lazy " + Prelude.show(dictShow)($foreign.force(x));
    });
};
var semiringLazy = function (dictSemiring) {
    return new Prelude.Semiring(function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Prelude["+"](dictSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Prelude["*"](dictSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    }, $foreign.defer(function (v) {
        return Prelude.one(dictSemiring);
    }), $foreign.defer(function (v) {
        return Prelude.zero(dictSemiring);
    }));
};
var semigroupLazy = function (dictSemigroup) {
    return new Prelude.Semigroup(function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Prelude["<>"](dictSemigroup)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var ringLazy = function (dictRing) {
    return new Prelude.Ring(function () {
        return semiringLazy(dictRing["__superclass_Prelude.Semiring_0"]());
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Prelude["-"](dictRing)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var monoidLazy = function (dictMonoid) {
    return new Data_Monoid.Monoid(function () {
        return semigroupLazy(dictMonoid["__superclass_Prelude.Semigroup_0"]());
    }, $foreign.defer(function (v) {
        return Data_Monoid.mempty(dictMonoid);
    }));
};
var moduloSemiringLazy = function (dictModuloSemiring) {
    return new Prelude.ModuloSemiring(function () {
        return semiringLazy(dictModuloSemiring["__superclass_Prelude.Semiring_0"]());
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Prelude["/"](dictModuloSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    }, function (a) {
        return function (b) {
            return $foreign.defer(function (v) {
                return Prelude.mod(dictModuloSemiring)($foreign.force(a))($foreign.force(b));
            });
        };
    });
};
var lazyLazy = new Control_Lazy.Lazy(function (f) {
    return $foreign.defer(function (v) {
        return $foreign.force(f(Prelude.unit));
    });
});
var functorLazy = new Prelude.Functor(function (f) {
    return function (l) {
        return $foreign.defer(function (v) {
            return f($foreign.force(l));
        });
    };
});
var extendLazy = new Control_Extend.Extend(function () {
    return functorLazy;
}, function (f) {
    return function (x) {
        return $foreign.defer(function (v) {
            return f(x);
        });
    };
});
var eqLazy = function (dictEq) {
    return new Prelude.Eq(function (x) {
        return function (y) {
            return Prelude["=="](dictEq)($foreign.force(x))($foreign.force(y));
        };
    });
};
var ordLazy = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqLazy(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (x) {
        return function (y) {
            return Prelude.compare(dictOrd)($foreign.force(x))($foreign.force(y));
        };
    });
};
var divisionRingLazy = function (dictDivisionRing) {
    return new Prelude.DivisionRing(function () {
        return moduloSemiringLazy(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]());
    }, function () {
        return ringLazy(dictDivisionRing["__superclass_Prelude.Ring_0"]());
    });
};
var numLazy = function (dictNum) {
    return new Prelude.Num(function () {
        return divisionRingLazy(dictNum["__superclass_Prelude.DivisionRing_0"]());
    });
};
var comonadLazy = new Control_Comonad.Comonad(function () {
    return extendLazy;
}, $foreign.force);
var boundedLazy = function (dictBounded) {
    return new Prelude.Bounded($foreign.defer(function (v) {
        return Prelude.bottom(dictBounded);
    }), $foreign.defer(function (v) {
        return Prelude.top(dictBounded);
    }));
};
var boundedOrdLazy = function (dictBoundedOrd) {
    return new Prelude.BoundedOrd(function () {
        return boundedLazy(dictBoundedOrd["__superclass_Prelude.Bounded_0"]());
    }, function () {
        return ordLazy(dictBoundedOrd["__superclass_Prelude.Ord_1"]());
    });
};
var applyLazy = new Prelude.Apply(function () {
    return functorLazy;
}, function (f) {
    return function (x) {
        return $foreign.defer(function (v) {
            return $foreign.force(f)($foreign.force(x));
        });
    };
});
var bindLazy = new Prelude.Bind(function () {
    return applyLazy;
}, function (l) {
    return function (f) {
        return $foreign.defer(function (v) {
            return $foreign.force(f($foreign.force(l)));
        });
    };
});
var booleanAlgebraLazy = function (dictBooleanAlgebra) {
    return new Prelude.BooleanAlgebra(function () {
        return boundedLazy(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
    }, function (a) {
        return function (b) {
            return Prelude["<*>"](applyLazy)(Prelude["<$>"](functorLazy)(Prelude.conj(dictBooleanAlgebra))(a))(b);
        };
    }, function (a) {
        return function (b) {
            return Prelude["<*>"](applyLazy)(Prelude["<$>"](functorLazy)(Prelude.disj(dictBooleanAlgebra))(a))(b);
        };
    }, function (a) {
        return Prelude["<$>"](functorLazy)(Prelude.not(dictBooleanAlgebra))(a);
    });
};
var applicativeLazy = new Prelude.Applicative(function () {
    return applyLazy;
}, function (a) {
    return $foreign.defer(function (v) {
        return a;
    });
});
var monadLazy = new Prelude.Monad(function () {
    return applicativeLazy;
}, function () {
    return bindLazy;
});
module.exports = {
    semiringLazy: semiringLazy, 
    ringLazy: ringLazy, 
    moduloSemiringLazy: moduloSemiringLazy, 
    divisionRingLazy: divisionRingLazy, 
    numLazy: numLazy, 
    eqLazy: eqLazy, 
    ordLazy: ordLazy, 
    boundedLazy: boundedLazy, 
    boundedOrdLazy: boundedOrdLazy, 
    semigroupLazy: semigroupLazy, 
    monoidLazy: monoidLazy, 
    booleanAlgebraLazy: booleanAlgebraLazy, 
    functorLazy: functorLazy, 
    applyLazy: applyLazy, 
    applicativeLazy: applicativeLazy, 
    bindLazy: bindLazy, 
    monadLazy: monadLazy, 
    extendLazy: extendLazy, 
    comonadLazy: comonadLazy, 
    showLazy: showLazy, 
    lazyLazy: lazyLazy, 
    force: $foreign.force, 
    defer: $foreign.defer
};
