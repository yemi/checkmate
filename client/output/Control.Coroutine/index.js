// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Data_Maybe = require("../Data.Maybe");
var Data_Tuple = require("../Data.Tuple");
var Data_Either = require("../Data.Either");
var Data_Identity = require("../Data.Identity");
var Data_Functor = require("../Data.Functor");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Profunctor = require("../Data.Profunctor");
var Control_Monad_Trans = require("../Control.Monad.Trans");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class");
var Transform = function (x) {
    return x;
};
var Emit = (function () {
    function Emit(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Emit.create = function (value0) {
        return function (value1) {
            return new Emit(value0, value1);
        };
    };
    return Emit;
})();
var Await = function (x) {
    return x;
};
var runProcess = function (dictMonadRec) {
    return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec)(function ($104) {
        return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(Data_Identity.runIdentity($104));
    });
};
var profunctorAwait = new Data_Profunctor.Profunctor(function (f) {
    return function (g) {
        return function (v) {
            return Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(f)(g)(v);
        };
    };
});
var loop = function (dictFunctor) {
    return function (dictMonad) {
        return function (me) {
            return Control_Monad_Rec_Class.tailRecM(Control_Monad_Free_Trans.monadRecFreeT(dictFunctor)(dictMonad))(function (v) {
                return Prelude.map(Control_Monad_Free_Trans.functorFreeT(dictFunctor)(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Data_Maybe.maybe(new Data_Either.Left(Prelude.unit))(Data_Either.Right.create))(me);
            })(Prelude.unit);
        };
    };
};
var fuseWith = function (dictFunctor) {
    return function (dictFunctor1) {
        return function (dictFunctor2) {
            return function (dictMonadRec) {
                return function (zap) {
                    return function (fs) {
                        return function (gs) {
                            var go = function (v) {
                                return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1))(function (v1) {
                                    return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0))(function (v2) {
                                        var $49 = Prelude["<*>"](Data_Either.applyEither)(Prelude["<$>"](Data_Either.functorEither)(zap(Data_Tuple.Tuple.create))(v2))(v1);
                                        if ($49 instanceof Data_Either.Left) {
                                            return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(new Data_Either.Left($49.value0));
                                        };
                                        if ($49 instanceof Data_Either.Right) {
                                            return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(Prelude.map(dictFunctor2)(function (t) {
                                                return Control_Monad_Free_Trans.freeT(function (v3) {
                                                    return go(t);
                                                });
                                            })($49.value0)));
                                        };
                                        throw new Error("Failed pattern match at Control.Coroutine line 60, column 5 - line 64, column 1: " + [ $49.constructor.name ]);
                                    });
                                });
                            };
                            return Control_Monad_Free_Trans.freeT(function (v) {
                                return go(new Data_Tuple.Tuple(fs, gs));
                            });
                        };
                    };
                };
            };
        };
    };
};
var functorAwait = new Prelude.Functor(Data_Profunctor.rmap(profunctorAwait));
var $bslash$div = function (dictMonadRec) {
    return fuseWith(functorAwait)(functorAwait)(functorAwait)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return function (v2) {
                    return f(v(v2.value0))(v1(v2.value1));
                };
            };
        };
    });
};
var bifunctorTransform = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return function ($105) {
                return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(f)(g)(v($105));
            };
        };
    };
});
var functorTransform = new Prelude.Functor(Data_Bifunctor.rmap(bifunctorTransform));
var transform = function (dictMonad) {
    return function (f) {
        return Control_Monad_Free_Trans.liftFreeT(functorTransform)(dictMonad)(function (i) {
            return new Data_Tuple.Tuple(f(i), Prelude.unit);
        });
    };
};
var $tilde$dollar = function (dictMonadRec) {
    return fuseWith(functorTransform)(functorAwait)(functorAwait)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return function (i) {
                    var $66 = v(i);
                    return f($66.value1)(v1($66.value0));
                };
            };
        };
    });
};
var $tilde$tilde = function (dictMonadRec) {
    return fuseWith(functorTransform)(functorTransform)(functorTransform)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return function (i) {
                    var $71 = v(i);
                    var $72 = v1($71.value0);
                    return new Data_Tuple.Tuple($72.value0, f($71.value1)($72.value1));
                };
            };
        };
    });
};
var bifunctorEmit = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (v) {
            return new Emit(f(v.value0), g(v.value1));
        };
    };
});
var functorEmit = new Prelude.Functor(Data_Bifunctor.rmap(bifunctorEmit));
var emit = function (dictMonad) {
    return function (o) {
        return Control_Monad_Free_Trans.liftFreeT(functorEmit)(dictMonad)(new Emit(o, Prelude.unit));
    };
};
var producer = function (dictMonad) {
    return function (recv) {
        return loop(functorEmit)(dictMonad)(Prelude.bind(Control_Monad_Free_Trans.bindFreeT(functorEmit)(dictMonad))(Control_Monad_Trans.lift(Control_Monad_Free_Trans.monadTransFreeT(functorEmit))(dictMonad)(recv))(function (v) {
            if (v instanceof Data_Either.Left) {
                return Data_Functor["$>"](Control_Monad_Free_Trans.functorFreeT(functorEmit)(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(emit(dictMonad)(v.value0))(Data_Maybe.Nothing.value);
            };
            if (v instanceof Data_Either.Right) {
                return Prelude["return"](Control_Monad_Free_Trans.applicativeFreeT(functorEmit)(dictMonad))(new Data_Maybe.Just(v.value0));
            };
            throw new Error("Failed pattern match at Control.Coroutine line 86, column 3 - line 91, column 1: " + [ v.constructor.name ]);
        }));
    };
};
var $dollar$dollar = function (dictMonadRec) {
    return fuseWith(functorEmit)(functorAwait)(Data_Identity.functorIdentity)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return f(v.value1)(v1(v.value0));
            };
        };
    });
};
var $dollar$tilde = function (dictMonadRec) {
    return fuseWith(functorEmit)(functorTransform)(functorEmit)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                var $92 = v1(v.value0);
                return new Emit($92.value0, f(v.value1)($92.value1));
            };
        };
    });
};
var $div$bslash = function (dictMonadRec) {
    return fuseWith(functorEmit)(functorEmit)(functorEmit)(dictMonadRec)(function (f) {
        return function (v) {
            return function (v1) {
                return new Emit(new Data_Tuple.Tuple(v.value0, v1.value0), f(v.value1)(v1.value1));
            };
        };
    });
};
var $$await = function (dictMonad) {
    return Control_Monad_Free_Trans.liftFreeT(functorAwait)(dictMonad)(Prelude.id(Prelude.categoryFn));
};
var consumer = function (dictMonad) {
    return function (send) {
        return loop(functorAwait)(dictMonad)(Prelude.bind(Control_Monad_Free_Trans.bindFreeT(functorAwait)(dictMonad))($$await(dictMonad))(function (v) {
            return Control_Monad_Trans.lift(Control_Monad_Free_Trans.monadTransFreeT(functorAwait))(dictMonad)(send(v));
        }));
    };
};
module.exports = {
    Transform: Transform, 
    Await: Await, 
    Emit: Emit, 
    "\\/": $bslash$div, 
    "/\\": $div$bslash, 
    "~~": $tilde$tilde, 
    "~$": $tilde$dollar, 
    "$~": $dollar$tilde, 
    "$$": $dollar$dollar, 
    transform: transform, 
    consumer: consumer, 
    "await": $$await, 
    producer: producer, 
    emit: emit, 
    fuseWith: fuseWith, 
    runProcess: runProcess, 
    loop: loop, 
    bifunctorEmit: bifunctorEmit, 
    functorEmit: functorEmit, 
    profunctorAwait: profunctorAwait, 
    functorAwait: functorAwait, 
    bifunctorTransform: bifunctorTransform, 
    functorTransform: functorTransform
};
