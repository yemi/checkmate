// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_MonadPlus = require("../Control.MonadPlus");
var Control_Plus = require("../Control.Plus");
var Control_Lazy = require("../Control.Lazy");
var Data_Foldable = require("../Data.Foldable");
var Data_Lazy = require("../Data.Lazy");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Data_Unfoldable = require("../Data.Unfoldable");
var List = function (x) {
    return x;
};
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var runList = function (v) {
    return v;
};
var step = function ($228) {
    return Data_Lazy.force(runList($228));
};
var semigroupList = new Prelude.Semigroup(function (xs) {
    return function (ys) {
        var go = function (v) {
            if (v instanceof Nil) {
                return step(ys);
            };
            if (v instanceof Cons) {
                return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 703, column 5 - line 704, column 5: " + [ v.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
});
var showList = function (dictShow) {
    return new Prelude.Show(function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return "Nil";
            };
            if (v instanceof Cons) {
                return "Cons (" + (Prelude.show(dictShow)(v.value0) + (") (" + (go(step(v.value1)) + ")")));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 673, column 3 - line 678, column 1: " + [ v.constructor.name ]);
        };
        return "fromStrict (" + (go(step(xs)) + ")");
    });
};
var uncons = function (xs) {
    var $73 = step(xs);
    if ($73 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if ($73 instanceof Cons) {
        return new Data_Maybe.Just({
            head: $73.value0, 
            tail: $73.value1
        });
    };
    throw new Error("Failed pattern match at Data.List.Lazy line 284, column 13 - line 295, column 1: " + [ $73.constructor.name ]);
};
var tail = function (xs) {
    return Prelude["<$>"](Data_Maybe.functorMaybe)(function (v) {
        return v.tail;
    })(uncons(xs));
};
var toUnfoldable = function (dictUnfoldable) {
    return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var take = function (n) {
    return function (xs) {
        var go = function (v) {
            return function (v1) {
                if (v === 0) {
                    return Nil.value;
                };
                if (v1 instanceof Nil) {
                    return Nil.value;
                };
                if (v1 instanceof Cons) {
                    return new Cons(v1.value0, take(v - 1)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 451, column 3 - line 452, column 3: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};
var takeWhile = function (p) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Cons && p(v.value0)) {
                return new Cons(v.value0, takeWhile(p)(v.value1));
            };
            return Nil.value;
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var updateAt = function (n) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                return function (v1) {
                    if (v1 instanceof Nil) {
                        return Nil.value;
                    };
                    if (v === 0 && v1 instanceof Cons) {
                        return new Cons(x, v1.value1);
                    };
                    if (v1 instanceof Cons) {
                        return new Cons(v1.value0, updateAt(v - 1)(x)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 346, column 3 - line 347, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
        };
    };
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            var go = function (v) {
                return function (v1) {
                    if (v instanceof Nil) {
                        return Nil.value;
                    };
                    if (v1 instanceof Nil) {
                        return Nil.value;
                    };
                    if (v instanceof Cons && v1 instanceof Cons) {
                        return new Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 618, column 3 - line 619, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Prelude["<*>"](Data_Lazy.applyLazy)(Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs)))(runList(ys));
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var $$null = function ($229) {
    return Data_Maybe.isNothing(uncons($229));
};
var nil = List(Data_Lazy.defer(function (v) {
    return Nil.value;
}));
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, nil);
var mapMaybe = function (f) {
    return function (xs) {
        var go = function (__copy_v) {
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Nil) {
                    return Nil.value;
                };
                if (v instanceof Cons) {
                    var $97 = f(v.value0);
                    if ($97 instanceof Data_Maybe.Nothing) {
                        var __tco_v = step(v.value1);
                        v = __tco_v;
                        continue tco;
                    };
                    if ($97 instanceof Data_Maybe.Just) {
                        return new Cons($97.value0, mapMaybe(f)(v.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 427, column 5 - line 433, column 1: " + [ $97.constructor.name ]);
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 423, column 1 - line 433, column 1: " + [ v.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var length = function (xs) {
    var go = function (v) {
        if (v instanceof Nil) {
            return 0;
        };
        if (v instanceof Cons) {
            return 1 + go(step(v.value1)) | 0;
        };
        throw new Error("Failed pattern match at Data.List.Lazy line 199, column 1 - line 211, column 1: " + [ v.constructor.name ]);
    };
    return go(step(xs));
};
var lazyList = new Control_Lazy.Lazy(function (f) {
    return List(Data_Lazy.defer(function ($230) {
        return step(f($230));
    }));
});
var last = function (xs) {
    var go = function (__copy_v) {
        var v = __copy_v;
        tco: while (true) {
            if (v instanceof Cons) {
                if ($$null(v.value1)) {
                    return new Data_Maybe.Just(v.value0);
                };
                if (Prelude.otherwise) {
                    var __tco_v = step(v.value1);
                    v = __tco_v;
                    continue tco;
                };
            };
            return Data_Maybe.Nothing.value;
        };
    };
    return go(step(xs));
};
var index = function (xs) {
    var go = function (__copy_v) {
        return function (__copy_v1) {
            var v = __copy_v;
            var v1 = __copy_v1;
            tco: while (true) {
                if (v instanceof Nil) {
                    return Data_Maybe.Nothing.value;
                };
                if (v instanceof Cons && v1 === 0) {
                    return new Data_Maybe.Just(v.value0);
                };
                if (v instanceof Cons) {
                    var __tco_v = step(v.value1);
                    var __tco_v1 = v1 - 1;
                    v = __tco_v;
                    v1 = __tco_v1;
                    continue tco;
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 296, column 1 - line 302, column 1: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    };
    return go(step(xs));
};
var $bang$bang = index;
var head = function (xs) {
    return Prelude["<$>"](Data_Maybe.functorMaybe)(function (v) {
        return v.head;
    })(uncons(xs));
};
var functorList = new Prelude.Functor(function (f) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return new Cons(f(v.value0), Prelude["<$>"](functorList)(f)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 712, column 5 - line 713, column 5: " + [ v.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
});
var fromStep = function ($231) {
    return List(Prelude.pure(Data_Lazy.applicativeLazy)($231));
};
var insertBy = function (cmp) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return new Cons(x, nil);
                };
                if (v instanceof Cons) {
                    var $117 = cmp(x)(v.value0);
                    if ($117 instanceof Prelude.GT) {
                        return new Cons(v.value0, insertBy(cmp)(x)(v.value1));
                    };
                    return new Cons(x, fromStep(v));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 236, column 3 - line 237, column 3: " + [ v.constructor.name ]);
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};
var insert = function (dictOrd) {
    return insertBy(Prelude.compare(dictOrd));
};
var fromList = function (dictUnfoldable) {
    return toUnfoldable(dictUnfoldable);
};
var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
    return function (f) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return Data_Monoid.mempty(dictMonoid);
                };
                if (v instanceof Cons) {
                    return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(v.value0))(Data_Foldable.foldMap(foldableList)(dictMonoid)(f)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 731, column 5 - line 732, column 5: " + [ v.constructor.name ]);
            };
            return go(step(xs));
        };
    };
}, function (o) {
    return function (b) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return b;
                };
                if (v instanceof Cons) {
                    return Data_Foldable.foldl(foldableList)(o)(o(b)(v.value0))(v.value1);
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 725, column 5 - line 726, column 5: " + [ v.constructor.name ]);
            };
            return go(step(xs));
        };
    };
}, function (o) {
    return function (b) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return b;
                };
                if (v instanceof Cons) {
                    return o(v.value0)(Data_Foldable.foldr(foldableList)(o)(b)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 719, column 5 - line 720, column 5: " + [ v.constructor.name ]);
            };
            return go(step(xs));
        };
    };
});
var filter = function (p) {
    return function (xs) {
        var go = function (__copy_v) {
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Nil) {
                    return Nil.value;
                };
                if (v instanceof Cons) {
                    if (p(v.value0)) {
                        return new Cons(v.value0, filter(p)(v.value1));
                    };
                    if (Prelude.otherwise) {
                        var __tco_v = step(v.value1);
                        v = __tco_v;
                        continue tco;
                    };
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 411, column 1 - line 422, column 1: " + [ v.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return filter(function (x) {
                return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(eq(x))(ys);
            })(xs);
        };
    };
};
var intersect = function (dictEq) {
    return intersectBy(Prelude["=="](dictEq));
};
var nubBy = function (eq) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return new Cons(v.value0, nubBy(eq)(filter(function (y) {
                    return !eq(v.value0)(y);
                })(v.value1)));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 544, column 3 - line 545, column 3: " + [ v.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var nub = function (dictEq) {
    return nubBy(Prelude.eq(dictEq));
};
var eqList = function (dictEq) {
    return new Prelude.Eq(function (xs) {
        return function (ys) {
            var go = function (__copy_v) {
                return function (__copy_v1) {
                    var v = __copy_v;
                    var v1 = __copy_v1;
                    tco: while (true) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            return true;
                        };
                        if (v instanceof Cons && (v1 instanceof Cons && Prelude["=="](dictEq)(v.value0)(v1.value0))) {
                            var __tco_v = step(v.value1);
                            var __tco_v1 = step(v1.value1);
                            v = __tco_v;
                            v1 = __tco_v1;
                            continue tco;
                        };
                        return false;
                    };
                };
            };
            return go(step(xs))(step(ys));
        };
    });
};
var ordList = function (dictOrd) {
    return new Prelude.Ord(function () {
        return eqList(dictOrd["__superclass_Prelude.Eq_0"]());
    }, function (xs) {
        return function (ys) {
            var go = function (__copy_v) {
                return function (__copy_v1) {
                    var v = __copy_v;
                    var v1 = __copy_v1;
                    tco: while (true) {
                        if (v instanceof Nil && v1 instanceof Nil) {
                            return Prelude.EQ.value;
                        };
                        if (v instanceof Nil) {
                            return Prelude.LT.value;
                        };
                        if (v1 instanceof Nil) {
                            return Prelude.GT.value;
                        };
                        if (v instanceof Cons && v1 instanceof Cons) {
                            var $143 = Prelude.compare(dictOrd)(v.value0)(v1.value0);
                            if ($143 instanceof Prelude.EQ) {
                                var __tco_v = step(v.value1);
                                var __tco_v1 = step(v1.value1);
                                v = __tco_v;
                                v1 = __tco_v1;
                                continue tco;
                            };
                            return $143;
                        };
                        throw new Error("Failed pattern match at Data.List.Lazy line 687, column 3 - line 697, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                    };
                };
            };
            return go(step(xs))(step(ys));
        };
    });
};
var dropWhile = function (p) {
    return function (xs) {
        var go = function (__copy_v) {
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Cons && p(v.value0)) {
                    var __tco_v = step(v.value1);
                    v = __tco_v;
                    continue tco;
                };
                return fromStep(v);
            };
        };
        return go(step(xs));
    };
};
var drop = function (n) {
    return function (xs) {
        var go = function (__copy_v) {
            return function (__copy_v1) {
                var v = __copy_v;
                var v1 = __copy_v1;
                tco: while (true) {
                    if (v === 0) {
                        return v1;
                    };
                    if (v1 instanceof Nil) {
                        return Nil.value;
                    };
                    if (v1 instanceof Cons) {
                        var __tco_v = v - 1;
                        var __tco_v1 = step(v1.value1);
                        v = __tco_v;
                        v1 = __tco_v1;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 468, column 1 - line 477, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};
var deleteBy = function (eq) {
    return function (x) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return Nil.value;
                };
                if (v instanceof Cons) {
                    if (eq(x)(v.value0)) {
                        return step(v.value1);
                    };
                    if (Prelude.otherwise) {
                        return new Cons(v.value0, deleteBy(eq)(x)(v.value1));
                    };
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 573, column 3 - line 574, column 3: " + [ v.constructor.name ]);
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (dictEq) {
    return unionBy(Prelude["=="](dictEq));
};
var deleteAt = function (n) {
    return function (xs) {
        var go = function (v) {
            return function (v1) {
                if (v1 instanceof Nil) {
                    return Nil.value;
                };
                if (v === 0 && v1 instanceof Cons) {
                    return step(v1.value1);
                };
                if (v1 instanceof Cons) {
                    return new Cons(v1.value0, deleteAt(v - 1)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 332, column 3 - line 333, column 3: " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};
var $$delete = function (dictEq) {
    return deleteBy(Prelude["=="](dictEq));
};
var $bslash$bslash = function (dictEq) {
    return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(dictEq)));
};
var cycle = function (xs) {
    return Control_Lazy.fix(lazyList)(function (ys) {
        return Prelude["<>"](semigroupList)(xs)(ys);
    });
};
var cons = function (x) {
    return function (xs) {
        return List(Data_Lazy.defer(function (v) {
            return new Cons(x, xs);
        }));
    };
};
var fromFoldable = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(cons)(nil);
};
var toList = function (dictFoldable) {
    return fromFoldable(dictFoldable);
};
var init = function (xs) {
    var go = function (v) {
        if (v instanceof Cons) {
            if ($$null(v.value1)) {
                return new Data_Maybe.Just(nil);
            };
            if (Prelude.otherwise) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(cons(v.value0))(go(step(v.value1)));
            };
        };
        return Data_Maybe.Nothing.value;
    };
    return go(step(xs));
};
var insertAt = function (v) {
    return function (x) {
        return function (xs) {
            if (v === 0) {
                return cons(x)(xs);
            };
            var go = function (v1) {
                if (v1 instanceof Nil) {
                    return new Cons(x, nil);
                };
                if (v1 instanceof Cons) {
                    return new Cons(v1.value0, insertAt(v - 1)(x)(v1.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 319, column 3 - line 320, column 3: " + [ v1.constructor.name ]);
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};
var iterate = function (f) {
    return function (x) {
        return Control_Lazy.fix(lazyList)(function (xs) {
            return cons(x)(Prelude["<$>"](functorList)(f)(xs));
        });
    };
};
var repeat = function (x) {
    return Control_Lazy.fix(lazyList)(function (xs) {
        return cons(x)(xs);
    });
};
var reverse = function (xs) {
    var go = function (__copy_acc) {
        return function (__copy_v) {
            var acc = __copy_acc;
            var v = __copy_v;
            tco: while (true) {
                if (v instanceof Nil) {
                    return acc;
                };
                if (v instanceof Cons) {
                    var __tco_acc = cons(v.value0)(acc);
                    var __tco_v = step(v.value1);
                    acc = __tco_acc;
                    v = __tco_v;
                    continue tco;
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 386, column 1 - line 394, column 1: " + [ acc.constructor.name, v.constructor.name ]);
            };
        };
    };
    return go(nil)(step(xs));
};
var singleton = function (a) {
    return cons(a)(nil);
};
var range = function (start) {
    return function (end) {
        if (start === end) {
            return singleton(start);
        };
        if (Prelude.otherwise) {
            var go = function (__copy_s) {
                return function (__copy_e) {
                    return function (__copy_step$prime) {
                        return function (__copy_rest) {
                            var s = __copy_s;
                            var e = __copy_e;
                            var step$prime = __copy_step$prime;
                            var rest = __copy_rest;
                            tco: while (true) {
                                if (s === e) {
                                    return cons(s)(rest);
                                };
                                if (Prelude.otherwise) {
                                    var __tco_s = s + step$prime | 0;
                                    var __tco_e = e;
                                    var __tco_step$prime = step$prime;
                                    var __tco_rest = cons(s)(rest);
                                    s = __tco_s;
                                    e = __tco_e;
                                    step$prime = __tco_step$prime;
                                    rest = __tco_rest;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match at Data.List.Lazy line 167, column 1 - line 174, column 1: " + [ s.constructor.name, e.constructor.name, step$prime.constructor.name, rest.constructor.name ]);
                            };
                        };
                    };
                };
            };
            return go(end)(start)((function () {
                var $184 = start > end;
                if ($184) {
                    return 1;
                };
                if (!$184) {
                    return -1;
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 168, column 45 - line 168, column 74: " + [ $184.constructor.name ]);
            })())(nil);
        };
        throw new Error("Failed pattern match at Data.List.Lazy line 167, column 1 - line 174, column 1: " + [ start.constructor.name, end.constructor.name ]);
    };
};
var $dot$dot = range;
var span = function (p) {
    return function (xs) {
        var $185 = uncons(xs);
        if ($185 instanceof Data_Maybe.Just && p($185.value0.head)) {
            var $186 = span(p)($185.value0.tail);
            return {
                init: cons($185.value0.head)($186.init), 
                rest: $186.rest
            };
        };
        return {
            init: nil, 
            rest: xs
        };
    };
};
var groupBy = function (eq) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                var $193 = span(eq(v.value0))(v.value1);
                return new Cons(cons(v.value0)($193.init), groupBy(eq)($193.rest));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 522, column 3 - line 523, column 3: " + [ v.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var group = function (dictEq) {
    return groupBy(Prelude["=="](dictEq));
};
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (dictApplicative) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Prelude.pure(dictApplicative)(nil);
            };
            if (v instanceof Cons) {
                return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(cons)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 752, column 5 - line 753, column 5: " + [ v.constructor.name ]);
        };
        return go(step(xs));
    };
}, function (dictApplicative) {
    return function (f) {
        return function (xs) {
            var go = function (v) {
                if (v instanceof Nil) {
                    return Prelude.pure(dictApplicative)(nil);
                };
                if (v instanceof Cons) {
                    return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(cons)(f(v.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(f)(v.value1));
                };
                throw new Error("Failed pattern match at Data.List.Lazy line 746, column 5 - line 747, column 5: " + [ v.constructor.name ]);
            };
            return go(step(xs));
        };
    };
});
var $colon = cons;
var transpose = function (xs) {
    var $204 = uncons(xs);
    if ($204 instanceof Data_Maybe.Nothing) {
        return xs;
    };
    if ($204 instanceof Data_Maybe.Just) {
        var $205 = uncons($204.value0.head);
        if ($205 instanceof Data_Maybe.Nothing) {
            return transpose($204.value0.tail);
        };
        if ($205 instanceof Data_Maybe.Just) {
            return $colon($colon($205.value0.head)(mapMaybe(head)($204.value0.tail)))(transpose($colon($205.value0.tail)(mapMaybe(tail)($204.value0.tail))));
        };
        throw new Error("Failed pattern match at Data.List.Lazy line 648, column 7 - line 660, column 1: " + [ $205.constructor.name ]);
    };
    throw new Error("Failed pattern match at Data.List.Lazy line 644, column 3 - line 660, column 1: " + [ $204.constructor.name ]);
};
var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
    return function (b) {
        var go = function (v) {
            if (v instanceof Data_Maybe.Nothing) {
                return nil;
            };
            if (v instanceof Data_Maybe.Just) {
                return $colon(v.value0.value0)(Control_Lazy.defer(lazyList)(function (v1) {
                    return go(f(v.value0.value1));
                }));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 736, column 3 - line 742, column 1: " + [ v.constructor.name ]);
        };
        return go(f(b));
    };
});
var concatMap = function (f) {
    return function (xs) {
        var go = function (v) {
            if (v instanceof Nil) {
                return Nil.value;
            };
            if (v instanceof Cons) {
                return step(Prelude["<>"](semigroupList)(f(v.value0))(concatMap(f)(v.value1)));
            };
            throw new Error("Failed pattern match at Data.List.Lazy line 404, column 3 - line 405, column 3: " + [ v.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
var monadList = new Prelude.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var bindList = new Prelude.Bind(function () {
    return applyList;
}, Prelude.flip(concatMap));
var applyList = new Prelude.Apply(function () {
    return functorList;
}, Prelude.ap(monadList));
var applicativeList = new Prelude.Applicative(function () {
    return applyList;
}, singleton);
var concat = function (v) {
    return Prelude[">>="](bindList)(v)(Prelude.id(Prelude.categoryFn));
};
var alterAt = function (n) {
    return function (f) {
        return function (xs) {
            var go = function (v) {
                return function (v1) {
                    if (v1 instanceof Nil) {
                        return Nil.value;
                    };
                    if (v === 0 && v1 instanceof Cons) {
                        var $222 = f(v1.value0);
                        if ($222 instanceof Data_Maybe.Nothing) {
                            return step(v1.value1);
                        };
                        if ($222 instanceof Data_Maybe.Just) {
                            return new Cons($222.value0, v1.value1);
                        };
                        throw new Error("Failed pattern match at Data.List.Lazy line 373, column 22 - line 376, column 3: " + [ $222.constructor.name ]);
                    };
                    if (v1 instanceof Cons) {
                        return new Cons(v1.value0, alterAt(v - 1)(f)(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.List.Lazy line 372, column 3 - line 373, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
        };
    };
};
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(function ($232) {
            return Data_Maybe.Just.create(f($232));
        });
    };
};
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Prelude.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, nil);
var alternativeList = new Control_Alternative.Alternative(function () {
    return plusList;
}, function () {
    return applicativeList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return alternativeList;
}, function () {
    return monadList;
});
module.exports = {
    Nil: Nil, 
    Cons: Cons, 
    List: List, 
    fromList: fromList, 
    toList: toList, 
    transpose: transpose, 
    zip: zip, 
    zipWith: zipWith, 
    intersectBy: intersectBy, 
    intersect: intersect, 
    "\\\\": $bslash$bslash, 
    deleteBy: deleteBy, 
    "delete": $$delete, 
    unionBy: unionBy, 
    union: union, 
    nubBy: nubBy, 
    nub: nub, 
    groupBy: groupBy, 
    group: group, 
    span: span, 
    dropWhile: dropWhile, 
    drop: drop, 
    takeWhile: takeWhile, 
    take: take, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    filter: filter, 
    concatMap: concatMap, 
    concat: concat, 
    reverse: reverse, 
    alterAt: alterAt, 
    modifyAt: modifyAt, 
    updateAt: updateAt, 
    deleteAt: deleteAt, 
    insertAt: insertAt, 
    index: index, 
    "!!": $bang$bang, 
    uncons: uncons, 
    init: init, 
    tail: tail, 
    last: last, 
    head: head, 
    insertBy: insertBy, 
    insert: insert, 
    cons: cons, 
    ":": $colon, 
    length: length, 
    "null": $$null, 
    cycle: cycle, 
    iterate: iterate, 
    repeat: repeat, 
    range: range, 
    "..": $dot$dot, 
    singleton: singleton, 
    nil: nil, 
    step: step, 
    fromFoldable: fromFoldable, 
    toUnfoldable: toUnfoldable, 
    runList: runList, 
    showList: showList, 
    eqList: eqList, 
    ordList: ordList, 
    lazyList: lazyList, 
    semigroupList: semigroupList, 
    monoidList: monoidList, 
    functorList: functorList, 
    foldableList: foldableList, 
    unfoldableList: unfoldableList, 
    traversableList: traversableList, 
    applyList: applyList, 
    applicativeList: applicativeList, 
    bindList: bindList, 
    monadList: monadList, 
    altList: altList, 
    plusList: plusList, 
    alternativeList: alternativeList, 
    monadPlusList: monadPlusList
};
