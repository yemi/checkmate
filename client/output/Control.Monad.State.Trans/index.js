// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Data_Tuple = require("../Data.Tuple");
var Data_Either = require("../Data.Either");
var Control_Alt = require("../Control.Alt");
var Control_Alternative = require("../Control.Alternative");
var Control_Lazy = require("../Control.Lazy");
var Control_Monad_Cont_Class = require("../Control.Monad.Cont.Class");
var Control_Monad_Eff_Class = require("../Control.Monad.Eff.Class");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class");
var Control_Monad_Reader_Class = require("../Control.Monad.Reader.Class");
var Control_Monad_Rec_Class = require("../Control.Monad.Rec.Class");
var Control_Monad_State_Class = require("../Control.Monad.State.Class");
var Control_Monad_Trans = require("../Control.Monad.Trans");
var Control_Monad_Writer_Class = require("../Control.Monad.Writer.Class");
var Control_MonadPlus = require("../Control.MonadPlus");
var Control_Plus = require("../Control.Plus");
var StateT = function (x) {
    return x;
};
var runStateT = function (v) {
    return v;
};
var withStateT = function (f) {
    return function (s) {
        return StateT(function ($60) {
            return runStateT(s)(f($60));
        });
    };
};
var monadTransStateT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
    return function (m) {
        return function (s) {
            return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v, s));
            });
        };
    };
});
var mapStateT = function (f) {
    return function (m) {
        return StateT(function ($61) {
            return f(runStateT(m)($61));
        });
    };
};
var lazyStateT = new Control_Lazy.Lazy(function (f) {
    return StateT(function (s) {
        return runStateT(f(Prelude.unit))(s);
    });
});
var execStateT = function (dictApply) {
    return function (m) {
        return function (s) {
            return Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Data_Tuple.snd)(runStateT(m)(s));
        };
    };
};
var evalStateT = function (dictApply) {
    return function (m) {
        return function (s) {
            return Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Data_Tuple.fst)(runStateT(m)(s));
        };
    };
};
var monadStateT = function (dictMonad) {
    return new Prelude.Monad(function () {
        return applicativeStateT(dictMonad);
    }, function () {
        return bindStateT(dictMonad);
    });
};
var functorStateT = function (dictMonad) {
    return new Prelude.Functor(Prelude.liftM1(monadStateT(dictMonad)));
};
var bindStateT = function (dictMonad) {
    return new Prelude.Bind(function () {
        return applyStateT(dictMonad);
    }, function (v) {
        return function (f) {
            return function (s) {
                return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(v(s))(function (v1) {
                    return runStateT(f(v1.value0))(v1.value1);
                });
            };
        };
    });
};
var applyStateT = function (dictMonad) {
    return new Prelude.Apply(function () {
        return functorStateT(dictMonad);
    }, Prelude.ap(monadStateT(dictMonad)));
};
var applicativeStateT = function (dictMonad) {
    return new Prelude.Applicative(function () {
        return applyStateT(dictMonad);
    }, function (a) {
        return StateT(function (s) {
            return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(a, s));
        });
    });
};
var monadContStateT = function (dictMonadCont) {
    return new Control_Monad_Cont_Class.MonadCont(function () {
        return monadStateT(dictMonadCont["__superclass_Prelude.Monad_0"]());
    }, function (f) {
        return StateT(function (s) {
            return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                return runStateT(f(function (a) {
                    return StateT(function (s$prime) {
                        return c(new Data_Tuple.Tuple(a, s$prime));
                    });
                }))(s);
            });
        });
    });
};
var monadEffState = function (dictMonad) {
    return function (dictMonadEff) {
        return new Control_Monad_Eff_Class.MonadEff(function () {
            return monadStateT(dictMonad);
        }, function ($62) {
            return Control_Monad_Trans.lift(monadTransStateT)(dictMonad)(Control_Monad_Eff_Class.liftEff(dictMonadEff)($62));
        });
    };
};
var monadErrorStateT = function (dictMonadError) {
    return new Control_Monad_Error_Class.MonadError(function () {
        return monadStateT(dictMonadError["__superclass_Prelude.Monad_0"]());
    }, function (m) {
        return function (h) {
            return StateT(function (s) {
                return Control_Monad_Error_Class.catchError(dictMonadError)(runStateT(m)(s))(function (e) {
                    return runStateT(h(e))(s);
                });
            });
        };
    }, function (e) {
        return Control_Monad_Trans.lift(monadTransStateT)(dictMonadError["__superclass_Prelude.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
    });
};
var monadReaderStateT = function (dictMonadReader) {
    return new Control_Monad_Reader_Class.MonadReader(function () {
        return monadStateT(dictMonadReader["__superclass_Prelude.Monad_0"]());
    }, Control_Monad_Trans.lift(monadTransStateT)(dictMonadReader["__superclass_Prelude.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
        return mapStateT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
    });
};
var monadRecStateT = function (dictMonadRec) {
    return new Control_Monad_Rec_Class.MonadRec(function () {
        return monadStateT(dictMonadRec["__superclass_Prelude.Monad_0"]());
    }, function (f) {
        return function (a) {
            var f$prime = function (v) {
                return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(runStateT(f(v.value0))(v.value1))(function (v1) {
                    return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())((function () {
                        if (v1.value0 instanceof Data_Either.Left) {
                            return new Data_Either.Left(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                        };
                        if (v1.value0 instanceof Data_Either.Right) {
                            return new Data_Either.Right(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                        };
                        throw new Error("Failed pattern match at Control.Monad.State.Trans line 85, column 7 - line 89, column 1: " + [ v1.value0.constructor.name ]);
                    })());
                });
            };
            return function (s) {
                return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
            };
        };
    });
};
var monadStateStateT = function (dictMonad) {
    return new Control_Monad_State_Class.MonadState(function () {
        return monadStateT(dictMonad);
    }, function (f) {
        return StateT(function ($63) {
            return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(f($63));
        });
    });
};
var monadWriterStateT = function (dictMonad) {
    return function (dictMonadWriter) {
        return new Control_Monad_Writer_Class.MonadWriter(function () {
            return monadStateT(dictMonad);
        }, function (m) {
            return StateT(function (s) {
                return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(Control_Monad_Writer_Class.listen(dictMonadWriter)(runStateT(m)(s)))(function (v) {
                    return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
                });
            });
        }, function (m) {
            return StateT(function (s) {
                return Control_Monad_Writer_Class.pass(dictMonadWriter)(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runStateT(m)(s))(function (v) {
                    return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
                }));
            });
        }, function (wd) {
            return Control_Monad_Trans.lift(monadTransStateT)(dictMonad)(Control_Monad_Writer_Class.writer(dictMonadWriter)(wd));
        });
    };
};
var altStateT = function (dictMonad) {
    return function (dictAlt) {
        return new Control_Alt.Alt(function () {
            return functorStateT(dictMonad);
        }, function (x) {
            return function (y) {
                return StateT(function (s) {
                    return Control_Alt["<|>"](dictAlt)(runStateT(x)(s))(runStateT(y)(s));
                });
            };
        });
    };
};
var plusStateT = function (dictMonad) {
    return function (dictPlus) {
        return new Control_Plus.Plus(function () {
            return altStateT(dictMonad)(dictPlus["__superclass_Control.Alt.Alt_0"]());
        }, StateT(function (v) {
            return Control_Plus.empty(dictPlus);
        }));
    };
};
var alternativeStateT = function (dictMonad) {
    return function (dictAlternative) {
        return new Control_Alternative.Alternative(function () {
            return plusStateT(dictMonad)(dictAlternative["__superclass_Control.Plus.Plus_1"]());
        }, function () {
            return applicativeStateT(dictMonad);
        });
    };
};
var monadPlusStateT = function (dictMonadPlus) {
    return new Control_MonadPlus.MonadPlus(function () {
        return alternativeStateT(dictMonadPlus["__superclass_Prelude.Monad_0"]())(dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]());
    }, function () {
        return monadStateT(dictMonadPlus["__superclass_Prelude.Monad_0"]());
    });
};
module.exports = {
    StateT: StateT, 
    withStateT: withStateT, 
    mapStateT: mapStateT, 
    execStateT: execStateT, 
    evalStateT: evalStateT, 
    runStateT: runStateT, 
    functorStateT: functorStateT, 
    applyStateT: applyStateT, 
    applicativeStateT: applicativeStateT, 
    altStateT: altStateT, 
    plusStateT: plusStateT, 
    alternativeStateT: alternativeStateT, 
    bindStateT: bindStateT, 
    monadStateT: monadStateT, 
    monadRecStateT: monadRecStateT, 
    monadPlusStateT: monadPlusStateT, 
    monadTransStateT: monadTransStateT, 
    lazyStateT: lazyStateT, 
    monadEffState: monadEffState, 
    monadContStateT: monadContStateT, 
    monadErrorStateT: monadErrorStateT, 
    monadReaderStateT: monadReaderStateT, 
    monadStateStateT: monadStateStateT, 
    monadWriterStateT: monadWriterStateT
};
