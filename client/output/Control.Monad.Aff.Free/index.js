// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Cont_Trans = require("../Control.Monad.Cont.Trans");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Class = require("../Control.Monad.Eff.Class");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans");
var Control_Monad_Free = require("../Control.Monad.Free");
var Control_Monad_List_Trans = require("../Control.Monad.List.Trans");
var Control_Monad_Maybe_Trans = require("../Control.Monad.Maybe.Trans");
var Control_Monad_Reader_Trans = require("../Control.Monad.Reader.Trans");
var Control_Monad_RWS_Trans = require("../Control.Monad.RWS.Trans");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans");
var Control_Monad_Trans = require("../Control.Monad.Trans");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans");
var Data_Monoid = require("../Data.Monoid");
var Affable = function (fromAff) {
    this.fromAff = fromAff;
};
var fromAff = function (dict) {
    return dict.fromAff;
};
var fromEff = function (dictAffable) {
    return function (eff) {
        return fromAff(dictAffable)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(eff));
    };
};
var monadAffContT = function (dictAffable) {
    return function (dictMonad) {
        return new Affable(function ($20) {
            return Control_Monad_Trans.lift(Control_Monad_Cont_Trans.monadTransContT)(dictMonad)(fromAff(dictAffable)($20));
        });
    };
};
var monadAffExceptT = function (dictAffable) {
    return function (dictMonad) {
        return new Affable(function ($21) {
            return Control_Monad_Trans.lift(Control_Monad_Except_Trans.monadTransExceptT)(dictMonad)(fromAff(dictAffable)($21));
        });
    };
};
var monadAffListT = function (dictAffable) {
    return function (dictMonad) {
        return new Affable(function ($22) {
            return Control_Monad_Trans.lift(Control_Monad_List_Trans.monadTransListT)(dictMonad)(fromAff(dictAffable)($22));
        });
    };
};
var monadAffMaybe = function (dictAffable) {
    return function (dictMonad) {
        return new Affable(function ($23) {
            return Control_Monad_Trans.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(dictMonad)(fromAff(dictAffable)($23));
        });
    };
};
var monadAffRWS = function (dictAffable) {
    return function (dictMonad) {
        return function (dictMonoid) {
            return new Affable(function ($24) {
                return Control_Monad_Trans.lift(Control_Monad_RWS_Trans.monadTransRWST(dictMonoid))(dictMonad)(fromAff(dictAffable)($24));
            });
        };
    };
};
var monadAffReader = function (dictAffable) {
    return function (dictMonad) {
        return new Affable(function ($25) {
            return Control_Monad_Trans.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonad)(fromAff(dictAffable)($25));
        });
    };
};
var monadAffState = function (dictAffable) {
    return function (dictMonad) {
        return new Affable(function ($26) {
            return Control_Monad_Trans.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonad)(fromAff(dictAffable)($26));
        });
    };
};
var monadAffWriter = function (dictAffable) {
    return function (dictMonad) {
        return function (dictMonoid) {
            return new Affable(function ($27) {
                return Control_Monad_Trans.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid))(dictMonad)(fromAff(dictAffable)($27));
            });
        };
    };
};
var affableFree = function (dictAffable) {
    return new Affable(function ($28) {
        return Control_Monad_Free.liftF(fromAff(dictAffable)($28));
    });
};
var affableAff = new Affable(Prelude.id(Prelude.categoryFn));
module.exports = {
    Affable: Affable, 
    fromEff: fromEff, 
    fromAff: fromAff, 
    affableAff: affableAff, 
    affableFree: affableFree, 
    monadAffContT: monadAffContT, 
    monadAffExceptT: monadAffExceptT, 
    monadAffListT: monadAffListT, 
    monadAffMaybe: monadAffMaybe, 
    monadAffReader: monadAffReader, 
    monadAffRWS: monadAffRWS, 
    monadAffState: monadAffState, 
    monadAffWriter: monadAffWriter
};
