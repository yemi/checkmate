// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Free = require("../Control.Monad.Free");
var Control_Monad_Free_Trans = require("../Control.Monad.Free.Trans");
var Control_Monad_ST = require("../Control.Monad.ST");
var Data_Array = require("../Data.Array");
var Data_Array_ST = require("../Data.Array.ST");
var Data_Bifunctor = require("../Data.Bifunctor");
var Data_Foldable = require("../Data.Foldable");
var Data_Functor_Coproduct = require("../Data.Functor.Coproduct");
var Data_Lazy = require("../Data.Lazy");
var Data_List = require("../Data.List");
var Data_Map = require("../Data.Map");
var Data_Maybe = require("../Data.Maybe");
var Data_Maybe_Unsafe = require("../Data.Maybe.Unsafe");
var Data_NaturalTransformation = require("../Data.NaturalTransformation");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Data_Void = require("../Data.Void");
var Halogen_Component_ChildPath = require("../Halogen.Component.ChildPath");
var Halogen_Component_Hook = require("../Halogen.Component.Hook");
var Halogen_Component_Tree = require("../Halogen.Component.Tree");
var Halogen_HTML_Core = require("../Halogen.HTML.Core");
var Halogen_Query = require("../Halogen.Query");
var Halogen_Query_EventSource = require("../Halogen.Query.EventSource");
var Halogen_Query_HalogenF = require("../Halogen.Query.HalogenF");
var Halogen_Query_StateF = require("../Halogen.Query.StateF");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var Control_Coroutine_Stalling = require("../Control.Coroutine.Stalling");
var Data_Monoid = require("../Data.Monoid");
var Component = function (x) {
    return x;
};
var SlotConstructor = (function () {
    function SlotConstructor(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SlotConstructor.create = function (value0) {
        return function (value1) {
            return new SlotConstructor(value0, value1);
        };
    };
    return SlotConstructor;
})();
var ChildF = (function () {
    function ChildF(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ChildF.create = function (value0) {
        return function (value1) {
            return new ChildF(value0, value1);
        };
    };
    return ChildF;
})();
var ParentState = function (x) {
    return x;
};
var runChildF = function (v) {
    return v.value1;
};
var renderComponent = function (v) {
    return v.render;
};
var queryComponent = function (v) {
    return v["eval"];
};
var parentState = function (st) {
    return {
        parent: st, 
        children: Data_Map.empty
    };
};
var mapStateFParent = Halogen_Query_StateF.mapState(function (v) {
    return v.parent;
})(function (f) {
    return function (v) {
        return {
            parent: f(v.parent), 
            children: v.children
        };
    };
});
var mergeParentStateF = function ($185) {
    return Control_Monad_Free.liftF(Halogen_Query_HalogenF.StateHF.create(mapStateFParent($185)));
};
var mapStateFChild = function (dictOrd) {
    return function (p) {
        return Halogen_Query_StateF.mapState(function (v) {
            return Data_Maybe_Unsafe.fromJust(Prelude["<$>"](Data_Maybe.functorMaybe)(function (v1) {
                return v1.state;
            })(Data_Map.lookup(dictOrd)(p)(v.children)));
        })(function (f) {
            return function (v) {
                return {
                    parent: v.parent, 
                    children: Data_Map.update(dictOrd)(function (child) {
                        return new Data_Maybe.Just({
                            component: child.component, 
                            state: f(child.state), 
                            memo: Data_Maybe.Nothing.value
                        });
                    })(p)(v.children)
                };
            };
        });
    };
};
var liftQuery = Halogen_Query.liftH;
var liftChildF = function (dictFunctor) {
    return Control_Monad_Free.mapF(Halogen_Query_HalogenF.transformHF(dictFunctor)(Prelude.id(Prelude.categoryFn))(Data_Functor_Coproduct.right)(Prelude.id(Prelude.categoryFn)));
};
var queryParent = function (dictFunctor) {
    return function (f) {
        return function ($186) {
            return Control_Monad_Free.foldFree(Control_Monad_Free.freeMonadRec)(function (h) {
                if (h instanceof Halogen_Query_HalogenF.StateHF) {
                    return mergeParentStateF(h.value0);
                };
                if (h instanceof Halogen_Query_HalogenF.SubscribeHF) {
                    return Control_Monad_Free.liftF(new Halogen_Query_HalogenF.SubscribeHF(Control_Monad_Free_Trans.interpret(Control_Coroutine_Stalling.functorStallF)(dictFunctor)(Data_Bifunctor.lmap(Control_Coroutine_Stalling.bifunctorStallF)(Data_Functor_Coproduct.left))(Halogen_Query_EventSource.runEventSource(Halogen_Query_EventSource.fromParentEventSource(h.value0))), h.value1));
                };
                if (h instanceof Halogen_Query_HalogenF.QueryHF) {
                    return liftChildF(dictFunctor)(h.value0);
                };
                if (h instanceof Halogen_Query_HalogenF.RenderHF) {
                    return Control_Monad_Free.liftF(new Halogen_Query_HalogenF.RenderHF(h.value0, h.value1));
                };
                if (h instanceof Halogen_Query_HalogenF.RenderPendingHF) {
                    return Control_Monad_Free.liftF(new Halogen_Query_HalogenF.RenderPendingHF(h.value0));
                };
                if (h instanceof Halogen_Query_HalogenF.HaltHF) {
                    return Control_Monad_Free.liftF(Halogen_Query_HalogenF.HaltHF.value);
                };
                throw new Error("Failed pattern match at Halogen.Component line 489, column 5 - line 498, column 1: " + [ h.constructor.name ]);
            })(f($186));
        };
    };
};
var lifecycleComponent = function (spec) {
    var renderTree = function (html) {
        return Halogen_Component_Tree["mkTree'"]({
            slot: Prelude.unit, 
            html: Data_Lazy.defer(function (v) {
                return Unsafe_Coerce.unsafeCoerce(html);
            }), 
            eq: function (v) {
                return function (v1) {
                    return false;
                };
            }, 
            thunk: false
        });
    };
    return {
        render: function (s) {
            return {
                state: s, 
                hooks: [  ], 
                tree: renderTree(spec.render(s))
            };
        }, 
        "eval": spec["eval"], 
        initializer: spec.initializer, 
        finalizers: function (s) {
            return Data_Maybe.maybe([  ])(function (i) {
                return [ Halogen_Component_Hook.finalized(spec["eval"])(s)(i) ];
            })(spec.finalizer);
        }
    };
};
var interpret = function (dictFunctor) {
    return function (nat) {
        return function (v) {
            var render$prime = function (st) {
                var $100 = v.render(st);
                return {
                    state: $100.state, 
                    hooks: Prelude["<$>"](Prelude.functorArray)(Halogen_Component_Hook.rmapHook(dictFunctor)(nat))($100.hooks), 
                    tree: $100.tree
                };
            };
            return {
                render: render$prime, 
                "eval": function ($187) {
                    return Control_Monad_Free.mapF(Halogen_Query_HalogenF.hoistHalogenF(dictFunctor)(nat))(v["eval"]($187));
                }, 
                initializer: v.initializer, 
                finalizers: Prelude["<$>"](Prelude.functorFn)(Prelude.map(Prelude.functorArray)(Halogen_Component_Hook.mapFinalized(dictFunctor)(nat)))(v.finalizers)
            };
        };
    };
};
var initializeComponent = function (v) {
    return v.initializer;
};
var functorChildF = function (dictFunctor) {
    return new Prelude.Functor(function (f) {
        return function (v) {
            return new ChildF(v.value0, Prelude["<$>"](dictFunctor)(f)(v.value1));
        };
    });
};
var finalizeComponent = function (v) {
    return v.finalizers;
};
var parentFinalizers = function ($$eval) {
    return function (fin) {
        return function (v) {
            var parentFin = function (i) {
                return [ Halogen_Component_Hook.finalized($$eval)(parentState(v.parent))(Data_Functor_Coproduct.left(i)) ];
            };
            var childFin = function (child) {
                return finalizeComponent(child.component)(child.state);
            };
            return Prelude["<>"](Prelude.semigroupArray)(Data_Foldable.foldMap(Data_Map.foldableMap)(Data_Monoid.monoidArray)(childFin)(v.children))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray)(parentFin)(fin));
        };
    };
};
var renderParent = function (dictOrd) {
    return function (render) {
        return function (v) {
            var installChild = function (v1) {
                return function (v2) {
                    var update = function (hs) {
                        return function (c) {
                            return {
                                children: Data_Map.insert(dictOrd)(v1.value0)(c)(v2.children), 
                                removed: Data_Map["delete"](dictOrd)(v1.value0)(v2.removed), 
                                hooks: Prelude["<>"](Prelude.semigroupArray)(v2.hooks)(hs)
                            };
                        };
                    };
                    var renderChild = function (v3) {
                        return function (v4) {
                            if (v4.memo instanceof Data_Maybe.Just) {
                                return new Data_Tuple.Tuple(Halogen_HTML_Core.Slot.create(Halogen_Component_Tree.thunkTree(v4.memo.value0)), update([  ])(v4));
                            };
                            var r = renderComponent(v4.component)(v4.state);
                            var adapt = function (a) {
                                return Data_Functor_Coproduct.right(new ChildF(v1.value0, a));
                            };
                            var hooks$prime = Prelude["<$>"](Prelude.functorArray)(Halogen_Component_Hook.lmapHook(adapt))(Data_Maybe.maybe(r.hooks)(Prelude.flip(Data_Array.cons)(r.hooks))(v3));
                            var tree = Halogen_Component_Tree.graftTree(adapt)(Prelude["const"](v1.value0))(r.tree);
                            return Data_Tuple.Tuple.create(new Halogen_HTML_Core.Slot(tree))(update(hooks$prime)({
                                component: v4.component, 
                                state: r.state, 
                                memo: new Data_Maybe.Just(tree)
                            }));
                        };
                    };
                    var $121 = Data_Map.lookup(dictOrd)(v1.value0)(v.children);
                    if ($121 instanceof Data_Maybe.Just) {
                        return renderChild(Data_Maybe.Nothing.value)($121.value0);
                    };
                    if ($121 instanceof Data_Maybe.Nothing) {
                        var def$prime = v1.value1(Prelude.unit);
                        var hook = Prelude["<$>"](Data_Maybe.functorMaybe)(Halogen_Component_Hook.PostRender.create)(initializeComponent(def$prime.component));
                        return renderChild(hook)({
                            component: def$prime.component, 
                            state: def$prime.initialState, 
                            memo: Data_Maybe.Nothing.value
                        });
                    };
                    throw new Error("Failed pattern match at Halogen.Component line 444, column 5 - line 457, column 5: " + [ $121.constructor.name ]);
                };
            };
            var install = function (v1) {
                return function (st) {
                    if (v1 instanceof Halogen_HTML_Core.Text) {
                        return new Data_Tuple.Tuple(new Halogen_HTML_Core.Text(v1.value0), st);
                    };
                    if (v1 instanceof Halogen_HTML_Core.Slot) {
                        return installChild(v1.value0)(st);
                    };
                    if (v1 instanceof Halogen_HTML_Core.Element) {
                        return Control_Monad_Eff.runPure(function __do() {
                            var v2 = Data_Array_ST.emptySTArray();
                            var v3 = {
                                value: st
                            };
                            Control_Monad_Eff.foreachE(v1.value3)(function (el) {
                                return function __do() {
                                    var $135 = install(el)(v3.value);
                                    Prelude["void"](Control_Monad_Eff.functorEff)(Data_Array_ST.pushSTArray(v2)($135.value0))();
                                    return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(v3)($135.value1))();
                                };
                            })();
                            return new Data_Tuple.Tuple(Halogen_HTML_Core.Element.create(v1.value0)(v1.value1)(Prelude["<$>"](Prelude.functorArray)(Prelude.map(Halogen_HTML_Core.functorProp)(Data_Functor_Coproduct.left))(v1.value2))(Unsafe_Coerce.unsafeCoerce(v2)), v3.value);
                        });
                    };
                    throw new Error("Failed pattern match at Halogen.Component line 406, column 1 - line 481, column 1: " + [ v1.constructor.name, st.constructor.name ]);
                };
            };
            var init = {
                children: Data_Map.empty, 
                removed: v.children, 
                hooks: [  ]
            };
            var finalizeChild = function (child) {
                return Prelude.map(Prelude.functorArray)(Halogen_Component_Hook.Finalized.create)(finalizeComponent(child.component)(child.state));
            };
            var $143 = install(render(v.parent))(init);
            return {
                state: {
                    parent: v.parent, 
                    children: $143.value1.children
                }, 
                hooks: Prelude["<>"](Prelude.semigroupArray)(Data_Foldable.foldMap(Data_Map.foldableMap)(Data_Monoid.monoidArray)(finalizeChild)($143.value1.removed))($143.value1.hooks), 
                tree: Halogen_Component_Tree.mkTree(dictOrd["__superclass_Prelude.Eq_0"]())(Data_Lazy.defer(function (v1) {
                    return $143.value0;
                }))
            };
        };
    };
};
var emptyResult = function (state) {
    return {
        state: state, 
        hooks: [  ], 
        tree: Halogen_Component_Tree.emptyTree
    };
};
var transform = function (dictFunctor) {
    return function (reviewS) {
        return function (previewS) {
            return function (reviewQ) {
                return function (previewQ) {
                    return function (v) {
                        var render$prime = function (st) {
                            var $152 = v.render(st);
                            return {
                                state: reviewS($152.state), 
                                hooks: Prelude["<$>"](Prelude.functorArray)(Halogen_Component_Hook.lmapHook(reviewQ))($152.hooks), 
                                tree: Halogen_Component_Tree.graftTree(reviewQ)(Prelude.id(Prelude.categoryFn))($152.tree)
                            };
                        };
                        var modifyState = function (f) {
                            return function (s$prime) {
                                return Data_Maybe.maybe(s$prime)(function ($188) {
                                    return reviewS(f($188));
                                })(previewS(s$prime));
                            };
                        };
                        var go = function (v1) {
                            if (v1 instanceof Halogen_Query_HalogenF.StateHF && v1.value0 instanceof Halogen_Query_StateF.Get) {
                                return Control_Bind["=<<"](Control_Monad_Free.freeBind)(function ($189) {
                                    return Control_Monad_Free.liftF(Data_Maybe.maybe(Halogen_Query_HalogenF.HaltHF.value)(function (st$prime) {
                                        return new Halogen_Query_HalogenF.StateHF(new Halogen_Query_StateF.Get(function ($190) {
                                            return v1.value0.value0(Prelude["const"](st$prime)($190));
                                        }));
                                    })(previewS($189)));
                                })(Halogen_Query.get);
                            };
                            if (v1 instanceof Halogen_Query_HalogenF.StateHF && v1.value0 instanceof Halogen_Query_StateF.Modify) {
                                return Control_Monad_Free.liftF(new Halogen_Query_HalogenF.StateHF(new Halogen_Query_StateF.Modify(modifyState(v1.value0.value0), v1.value0.value1)));
                            };
                            if (v1 instanceof Halogen_Query_HalogenF.SubscribeHF) {
                                return Control_Monad_Free.liftF(new Halogen_Query_HalogenF.SubscribeHF(Control_Monad_Free_Trans.interpret(Control_Coroutine_Stalling.functorStallF)(dictFunctor)(Data_Bifunctor.lmap(Control_Coroutine_Stalling.bifunctorStallF)(reviewQ))(Halogen_Query_EventSource.runEventSource(v1.value0)), v1.value1));
                            };
                            if (v1 instanceof Halogen_Query_HalogenF.QueryHF) {
                                return Control_Monad_Free.liftF(new Halogen_Query_HalogenF.QueryHF(v1.value0));
                            };
                            if (v1 instanceof Halogen_Query_HalogenF.RenderHF) {
                                return Control_Monad_Free.liftF(new Halogen_Query_HalogenF.RenderHF(v1.value0, v1.value1));
                            };
                            if (v1 instanceof Halogen_Query_HalogenF.RenderPendingHF) {
                                return Control_Monad_Free.liftF(new Halogen_Query_HalogenF.RenderPendingHF(v1.value0));
                            };
                            if (v1 instanceof Halogen_Query_HalogenF.HaltHF) {
                                return Control_Monad_Free.liftF(Halogen_Query_HalogenF.HaltHF.value);
                            };
                            throw new Error("Failed pattern match at Halogen.Component line 554, column 3 - line 556, column 3: " + [ v1.constructor.name ]);
                        };
                        return {
                            render: function (st) {
                                return Data_Maybe.maybe(emptyResult(st))(render$prime)(previewS(st));
                            }, 
                            "eval": function ($191) {
                                return Data_Maybe.maybe(Control_Monad_Free.liftF(Halogen_Query_HalogenF.HaltHF.value))(function ($192) {
                                    return Control_Monad_Free.foldFree(Control_Monad_Free.freeMonadRec)(go)(v["eval"]($192));
                                })(previewQ($191));
                            }, 
                            initializer: Prelude["<$>"](Data_Maybe.functorMaybe)(reviewQ)(v.initializer), 
                            finalizers: function ($193) {
                                return Data_Maybe.maybe([  ])(v.finalizers)(previewS($193));
                            }
                        };
                    };
                };
            };
        };
    };
};
var transformChild = function (dictFunctor) {
    return function (i) {
        return transform(dictFunctor)(Halogen_Component_ChildPath.injState(i))(Halogen_Component_ChildPath.prjState(i))(Halogen_Component_ChildPath.injQuery(i))(Halogen_Component_ChildPath.prjQuery(i));
    };
};
var component = function (spec) {
    return lifecycleComponent({
        render: spec.render, 
        "eval": spec["eval"], 
        initializer: Data_Maybe.Nothing.value, 
        finalizer: Data_Maybe.Nothing.value
    });
};
var childSlots = function (dictFunctor) {
    return function (dictOrd) {
        return Prelude.bind(Control_Monad_Free.freeBind)(Halogen_Query.get)(function (v) {
            return Prelude.pure(Control_Monad_Free.freeApplicative)(Data_Map.keys(v.children));
        });
    };
};
var bracketQuery = function (f) {
    return Prelude.bind(Control_Monad_Free.freeBind)(Control_Monad_Free.liftF(new Halogen_Query_HalogenF.RenderPendingHF(Prelude.id(Prelude.categoryFn))))(function (v) {
        return Prelude.bind(Control_Monad_Free.freeBind)((function () {
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Halogen_Query_HalogenF.Pending) {
                return Control_Monad_Free.liftF(new Halogen_Query_HalogenF.RenderHF(Data_Maybe.Nothing.value, Prelude.unit));
            };
            return Prelude.pure(Control_Monad_Free.freeApplicative)(Prelude.unit);
        })())(function () {
            return Prelude.bind(Control_Monad_Free.freeBind)(f)(function (v1) {
                return Prelude.bind(Control_Monad_Free.freeBind)(Control_Monad_Free.liftF(new Halogen_Query_HalogenF.RenderPendingHF(Prelude.id(Prelude.categoryFn))))(function (v2) {
                    return Prelude.bind(Control_Monad_Free.freeBind)(Data_Foldable.for_(Control_Monad_Free.freeApplicative)(Data_Foldable.foldableMaybe)(v)(function (v3) {
                        return Control_Monad_Free.liftF(new Halogen_Query_HalogenF.RenderHF(new Data_Maybe.Just(Halogen_Query_HalogenF.Deferred.value), Prelude.unit));
                    }))(function () {
                        return Prelude.pure(Control_Monad_Free.freeApplicative)(v1);
                    });
                });
            });
        });
    });
};
var mkQueries$prime = function (dictFunctor) {
    return function (dictOrd) {
        return function (dictOrd1) {
            return function (i) {
                return function (q) {
                    var mkChildQuery = function (v) {
                        return Data_Traversable["for"](Control_Monad_Free.freeApplicative)(Data_Traversable.traversableMaybe)(Halogen_Component_ChildPath.prjSlot(i)(v.value0))(function (p) {
                            return Prelude["<$>"](Control_Monad_Free.freeFunctor)(Data_Tuple.Tuple.create(p))(Control_Monad_Free.mapF(Halogen_Query_HalogenF.transformHF(dictFunctor)(mapStateFChild(dictOrd)(v.value0))(ChildF.create(v.value0))(Prelude.id(Prelude.categoryFn)))(queryComponent(v.value1.component)(Halogen_Component_ChildPath.injQuery(i)(q))));
                        });
                    };
                    return bracketQuery(Prelude.bind(Control_Monad_Free.freeBind)(Halogen_Query.get)(function (v) {
                        return Prelude["<$>"](Control_Monad_Free.freeFunctor)(function ($194) {
                            return Data_Map.fromList(dictOrd1)(Data_List.catMaybes($194));
                        })(Data_Traversable.traverse(Data_List.traversableList)(Control_Monad_Free.freeApplicative)(mkChildQuery)(Data_Map.toList(v.children)));
                    }));
                };
            };
        };
    };
};
var mkQueries = function (dictFunctor) {
    return function (dictOrd) {
        return mkQueries$prime(dictFunctor)(dictOrd)(dictOrd)(new Halogen_Component_ChildPath.ChildPath(function (dictChoice) {
            return function (dictApplicative) {
                return Prelude.id(Prelude.categoryFn);
            };
        }, function (dictChoice) {
            return function (dictApplicative) {
                return Prelude.id(Prelude.categoryFn);
            };
        }, function (dictChoice) {
            return function (dictApplicative) {
                return Prelude.id(Prelude.categoryFn);
            };
        }));
    };
};
var queryAll = function (dictFunctor) {
    return function (dictOrd) {
        return function (q) {
            return liftQuery(mkQueries(dictFunctor)(dictOrd)(q));
        };
    };
};
var queryAll$prime = function (dictFunctor) {
    return function (dictOrd) {
        return function (dictOrd1) {
            return function (i) {
                return function (q) {
                    return liftQuery(mkQueries$prime(dictFunctor)(dictOrd1)(dictOrd)(i)(q));
                };
            };
        };
    };
};
var mkQuery = function (dictFunctor) {
    return function (dictOrd) {
        return function (p) {
            return function (q) {
                return bracketQuery(Prelude.bind(Control_Monad_Free.freeBind)(Halogen_Query.get)(function (v) {
                    return Data_Traversable["for"](Control_Monad_Free.freeApplicative)(Data_Traversable.traversableMaybe)(Data_Map.lookup(dictOrd)(p)(v.children))(function (child) {
                        return Control_Monad_Free.mapF(Halogen_Query_HalogenF.transformHF(dictFunctor)(mapStateFChild(dictOrd)(p))(ChildF.create(p))(Prelude.id(Prelude.categoryFn)))(queryComponent(child.component)(q));
                    });
                }));
            };
        };
    };
};
var mkQuery$prime = function (dictFunctor) {
    return function (dictOrd) {
        return function (i) {
            return function (p) {
                return function (q) {
                    return mkQuery(dictFunctor)(dictOrd)(Halogen_Component_ChildPath.injSlot(i)(p))(Halogen_Component_ChildPath.injQuery(i)(q));
                };
            };
        };
    };
};
var query$prime = function (dictFunctor) {
    return function (dictOrd) {
        return function (i) {
            return function (p) {
                return function (q) {
                    return liftQuery(mkQuery$prime(dictFunctor)(dictOrd)(i)(p)(q));
                };
            };
        };
    };
};
var query = function (dictFunctor) {
    return function (dictOrd) {
        return function (p) {
            return function (q) {
                return liftQuery(mkQuery(dictFunctor)(dictOrd)(p)(q));
            };
        };
    };
};
var queryChild = function (dictFunctor) {
    return function (dictOrd) {
        return function (v) {
            return Prelude[">>="](Control_Monad_Free.freeBind)(Control_Monad_Free.mapF(Halogen_Query_HalogenF.transformHF(dictFunctor)(Prelude.id(Prelude.categoryFn))(Data_Functor_Coproduct.right)(Prelude.id(Prelude.categoryFn)))(mkQuery(dictFunctor)(dictOrd)(v.value0)(v.value1)))(Data_Maybe.maybe(Control_Monad_Free.liftF(Halogen_Query_HalogenF.HaltHF.value))(Prelude.pure(Control_Monad_Free.freeApplicative)));
        };
    };
};
var lifecycleParentComponent = function (dictFunctor) {
    return function (dictOrd) {
        return function (spec) {
            var $$eval = Data_Functor_Coproduct.coproduct(queryParent(dictFunctor)(spec["eval"]))((function () {
                if (spec.peek instanceof Data_Maybe.Nothing) {
                    return queryChild(dictFunctor)(dictOrd);
                };
                if (spec.peek instanceof Data_Maybe.Just) {
                    return function (q) {
                        return Control_Apply["<*"](Control_Monad_Free.freeApply)(queryChild(dictFunctor)(dictOrd)(q))(queryParent(dictFunctor)(spec.peek.value0)(q));
                    };
                };
                throw new Error("Failed pattern match at Halogen.Component line 208, column 10 - line 212, column 1: " + [ spec.peek.constructor.name ]);
            })());
            return {
                render: renderParent(dictOrd)(spec.render), 
                "eval": $$eval, 
                initializer: Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Functor_Coproduct.left)(spec.initializer), 
                finalizers: parentFinalizers($$eval)(spec.finalizer)
            };
        };
    };
};
var parentComponent = function (dictFunctor) {
    return function (dictOrd) {
        return function (spec) {
            return lifecycleParentComponent(dictFunctor)(dictOrd)({
                render: spec.render, 
                "eval": spec["eval"], 
                peek: spec.peek, 
                initializer: Data_Maybe.Nothing.value, 
                finalizer: Data_Maybe.Nothing.value
            });
        };
    };
};
module.exports = {
    ChildF: ChildF, 
    SlotConstructor: SlotConstructor, 
    finalizeComponent: finalizeComponent, 
    initializeComponent: initializeComponent, 
    queryComponent: queryComponent, 
    renderComponent: renderComponent, 
    interpret: interpret, 
    transformChild: transformChild, 
    transform: transform, 
    childSlots: childSlots, 
    "queryAll'": queryAll$prime, 
    queryAll: queryAll, 
    "query'": query$prime, 
    query: query, 
    liftQuery: liftQuery, 
    "mkQueries'": mkQueries$prime, 
    mkQueries: mkQueries, 
    "mkQuery'": mkQuery$prime, 
    mkQuery: mkQuery, 
    runChildF: runChildF, 
    parentState: parentState, 
    lifecycleParentComponent: lifecycleParentComponent, 
    parentComponent: parentComponent, 
    lifecycleComponent: lifecycleComponent, 
    component: component, 
    functorChildF: functorChildF
};
