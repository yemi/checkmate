// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Data_Maybe = require("../Data.Maybe");
var Data_Enum = require("../Data.Enum");
var NONE = (function () {
    function NONE() {

    };
    NONE.value = new NONE();
    return NONE;
})();
var LOADING = (function () {
    function LOADING() {

    };
    LOADING.value = new LOADING();
    return LOADING;
})();
var LOADED = (function () {
    function LOADED() {

    };
    LOADED.value = new LOADED();
    return LOADED;
})();
var ERROR = (function () {
    function ERROR() {

    };
    ERROR.value = new ERROR();
    return ERROR;
})();
var toEnumReadyState = function (v) {
    if (v === 0) {
        return new Data_Maybe.Just(NONE.value);
    };
    if (v === 1) {
        return new Data_Maybe.Just(LOADING.value);
    };
    if (v === 2) {
        return new Data_Maybe.Just(LOADED.value);
    };
    if (v === 3) {
        return new Data_Maybe.Just(ERROR.value);
    };
    return Data_Maybe.Nothing.value;
};
var showReadyState = new Prelude.Show(function (v) {
    if (v instanceof NONE) {
        return "NONE";
    };
    if (v instanceof LOADING) {
        return "LOADING";
    };
    if (v instanceof LOADED) {
        return "LOADED";
    };
    if (v instanceof ERROR) {
        return "ERROR";
    };
    throw new Error("Failed pattern match at DOM.HTML.HTMLTrackElement.ReadyState line 37, column 3 - line 38, column 3: " + [ v.constructor.name ]);
});
var fromEnumReadyState = function (v) {
    if (v instanceof NONE) {
        return 0;
    };
    if (v instanceof LOADING) {
        return 1;
    };
    if (v instanceof LOADED) {
        return 2;
    };
    if (v instanceof ERROR) {
        return 3;
    };
    throw new Error("Failed pattern match at DOM.HTML.HTMLTrackElement.ReadyState line 50, column 1 - line 51, column 1: " + [ v.constructor.name ]);
};
var eqReadyState = new Prelude.Eq(function (v) {
    return function (v1) {
        if (v instanceof NONE && v1 instanceof NONE) {
            return true;
        };
        if (v instanceof LOADING && v1 instanceof LOADING) {
            return true;
        };
        if (v instanceof LOADED && v1 instanceof LOADED) {
            return true;
        };
        if (v instanceof ERROR && v1 instanceof ERROR) {
            return true;
        };
        return false;
    };
});
var ordReadyState = new Prelude.Ord(function () {
    return eqReadyState;
}, function (x) {
    return function (y) {
        return Prelude.compare(Prelude.ordInt)(fromEnumReadyState(x))(fromEnumReadyState(y));
    };
});
var boundedReadyState = new Prelude.Bounded(NONE.value, ERROR.value);
var enumReadyState = new Data_Enum.Enum(function () {
    return boundedReadyState;
}, 4, fromEnumReadyState, Data_Enum.defaultPred(toEnumReadyState)(fromEnumReadyState), Data_Enum.defaultSucc(toEnumReadyState)(fromEnumReadyState), toEnumReadyState);
var boundedOrdReadyState = new Prelude.BoundedOrd(function () {
    return boundedReadyState;
}, function () {
    return ordReadyState;
});
module.exports = {
    NONE: NONE, 
    LOADING: LOADING, 
    LOADED: LOADED, 
    ERROR: ERROR, 
    eqReadyState: eqReadyState, 
    ordReadyState: ordReadyState, 
    boundedReadyState: boundedReadyState, 
    boundedOrdReadyState: boundedOrdReadyState, 
    enumReadyState: enumReadyState, 
    showReadyState: showReadyState
};
