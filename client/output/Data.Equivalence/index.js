// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Data_Comparison = require("../Data.Comparison");
var Data_Function = require("../Data.Function");
var Data_Functor_Contravariant = require("../Data.Functor.Contravariant");
var Data_Monoid = require("../Data.Monoid");
var Equivalence = function (x) {
    return x;
};
var semigroupEquivalence = new Prelude.Semigroup(function (v) {
    return function (v1) {
        return function (a) {
            return function (b) {
                return v(a)(b) && v1(a)(b);
            };
        };
    };
});
var runEquivalence = function (v) {
    return v;
};
var monoidEquivalence = new Data_Monoid.Monoid(function () {
    return semigroupEquivalence;
}, function (v) {
    return function (v1) {
        return true;
    };
});
var defaultEquivalence = function (dictEq) {
    return Prelude.eq(dictEq);
};
var contravariantEquivalence = new Data_Functor_Contravariant.Contravariant(function (f) {
    return function (v) {
        return Data_Function.on(v)(f);
    };
});
var comparisonEquivalence = function (v) {
    return function (a) {
        return function (b) {
            return Prelude["=="](Prelude.eqOrdering)(v(a)(b))(Prelude.EQ.value);
        };
    };
};
module.exports = {
    Equivalence: Equivalence, 
    comparisonEquivalence: comparisonEquivalence, 
    defaultEquivalence: defaultEquivalence, 
    runEquivalence: runEquivalence, 
    contravariantEquivalence: contravariantEquivalence, 
    semigroupEquivalence: semigroupEquivalence, 
    monoidEquivalence: monoidEquivalence
};
