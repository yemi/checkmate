// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Data_Exists = require("../Data.Exists");
var Data_NaturalTransformation = require("../Data.NaturalTransformation");
var Control_Comonad = require("../Control.Comonad");
var Control_Extend = require("../Control.Extend");
var Control_Monad_Trans = require("../Control.Monad.Trans");
var CoyonedaF = function (x) {
    return x;
};
var Coyoneda = function (x) {
    return x;
};
var lowerCoyoneda = function (dictFunctor) {
    return function (v) {
        return Data_Exists.runExists(function (v1) {
            return Prelude["<$>"](dictFunctor)(v1.k)(v1.fi);
        })(v);
    };
};
var liftCoyoneda = function (fa) {
    return Coyoneda(Data_Exists.mkExists({
        k: Prelude.id(Prelude.categoryFn), 
        fi: fa
    }));
};
var monadTransCoyoneda = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
    return liftCoyoneda;
});
var coyoneda = function (k) {
    return function (fi) {
        return Coyoneda(Data_Exists.mkExists({
            k: k, 
            fi: fi
        }));
    };
};
var functorCoyoneda = new Prelude.Functor(function (f) {
    return function (v) {
        return Data_Exists.runExists(function (v1) {
            return coyoneda(function ($37) {
                return f(v1.k($37));
            })(v1.fi);
        })(v);
    };
});
var extendCoyoneda = function (dictExtend) {
    return new Control_Extend.Extend(function () {
        return functorCoyoneda;
    }, function (f) {
        return function (v) {
            return Data_Exists.runExists(function (v1) {
                return liftCoyoneda(Control_Extend["<<="](dictExtend)(function ($38) {
                    return f(coyoneda(v1.k)($38));
                })(v1.fi));
            })(v);
        };
    });
};
var liftCoyonedaT = function (nat) {
    return function (v) {
        return Data_Exists.runExists(function (v1) {
            return coyoneda(v1.k)(nat(v1.fi));
        })(v);
    };
};
var liftCoyonedaTF = function (dictFunctor) {
    return function (nat) {
        return function ($39) {
            return lowerCoyoneda(dictFunctor)(liftCoyonedaT(nat)($39));
        };
    };
};
var comonadCoyoneda = function (dictComonad) {
    return new Control_Comonad.Comonad(function () {
        return extendCoyoneda(dictComonad["__superclass_Control.Extend.Extend_0"]());
    }, function (v) {
        return Data_Exists.runExists(function (v1) {
            return v1.k(Control_Comonad.extract(dictComonad)(v1.fi));
        })(v);
    });
};
var applyCoyoneda = function (dictApply) {
    return new Prelude.Apply(function () {
        return functorCoyoneda;
    }, function (f) {
        return function (g) {
            return liftCoyoneda(Prelude["<*>"](dictApply)(lowerCoyoneda(dictApply["__superclass_Prelude.Functor_0"]())(f))(lowerCoyoneda(dictApply["__superclass_Prelude.Functor_0"]())(g)));
        };
    });
};
var bindCoyoneda = function (dictBind) {
    return new Prelude.Bind(function () {
        return applyCoyoneda(dictBind["__superclass_Prelude.Apply_0"]());
    }, function (v) {
        return function (k) {
            return liftCoyoneda(Data_Exists.runExists(function (v1) {
                return Prelude[">>="](dictBind)(v1.fi)(function ($40) {
                    return lowerCoyoneda((dictBind["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(k(v1.k($40)));
                });
            })(v));
        };
    });
};
var applicativeCoyoneda = function (dictApplicative) {
    return new Prelude.Applicative(function () {
        return applyCoyoneda(dictApplicative["__superclass_Prelude.Apply_0"]());
    }, function ($41) {
        return liftCoyoneda(Prelude.pure(dictApplicative)($41));
    });
};
var monadCoyoneda = function (dictMonad) {
    return new Prelude.Monad(function () {
        return applicativeCoyoneda(dictMonad["__superclass_Prelude.Applicative_0"]());
    }, function () {
        return bindCoyoneda(dictMonad["__superclass_Prelude.Bind_1"]());
    });
};
module.exports = {
    CoyonedaF: CoyonedaF, 
    Coyoneda: Coyoneda, 
    liftCoyonedaTF: liftCoyonedaTF, 
    liftCoyonedaT: liftCoyonedaT, 
    lowerCoyoneda: lowerCoyoneda, 
    liftCoyoneda: liftCoyoneda, 
    coyoneda: coyoneda, 
    functorCoyoneda: functorCoyoneda, 
    applyCoyoneda: applyCoyoneda, 
    applicativeCoyoneda: applicativeCoyoneda, 
    bindCoyoneda: bindCoyoneda, 
    monadCoyoneda: monadCoyoneda, 
    monadTransCoyoneda: monadTransCoyoneda, 
    extendCoyoneda: extendCoyoneda, 
    comonadCoyoneda: comonadCoyoneda
};
