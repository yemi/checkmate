// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Data_Monoid = require("../Data.Monoid");
var Data_Tuple = require("../Data.Tuple");
var MonadWriter = function (__superclass_Prelude$dotMonad_0, listen, pass, writer) {
    this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
    this.listen = listen;
    this.pass = pass;
    this.writer = writer;
};
var writer = function (dict) {
    return dict.writer;
};
var tell = function (dictMonoid) {
    return function (dictMonad) {
        return function (dictMonadWriter) {
            return function (w) {
                return writer(dictMonadWriter)(new Data_Tuple.Tuple(Prelude.unit, w));
            };
        };
    };
};
var pass = function (dict) {
    return dict.pass;
};
var listen = function (dict) {
    return dict.listen;
};
var listens = function (dictMonoid) {
    return function (dictMonad) {
        return function (dictMonadWriter) {
            return function (f) {
                return function (m) {
                    return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(listen(dictMonadWriter)(m))(function (v) {
                        return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
                    });
                };
            };
        };
    };
};
var censor = function (dictMonoid) {
    return function (dictMonad) {
        return function (dictMonadWriter) {
            return function (f) {
                return function (m) {
                    return pass(dictMonadWriter)(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                        return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v, f));
                    }));
                };
            };
        };
    };
};
module.exports = {
    MonadWriter: MonadWriter, 
    censor: censor, 
    listens: listens, 
    tell: tell, 
    pass: pass, 
    listen: listen, 
    writer: writer
};
